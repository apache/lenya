<?xml version="1.0" encoding="UTF-8"?>
<!-- Relate Module -->
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">

   <map:resources>
      <map:resource name="default">
<!-- Default: Request does not specify anything after the slash. Choose Structure. -->
<!-- TODO: Must be aware of Structure design elements in content -->
              <map:generate type="directory" src="module:///../../pubs/{publication:publication}/content/relation">
                  <map:parameter name="depth" value="1"/>
               </map:generate>
               <map:transform src="module:///structures.xsl">
                  <map:parameter name="module" value="{module:module}"/>
                  <map:parameter name="publication" value="{publication:publication}"/>
                  <map:parameter name="publicationname" value="{publication:name}"/>
               </map:transform>
               <map:serialize type="xml"/>
      </map:resource>
   </map:resources>

  <!-- =========================== Pipelines ================================ -->
   <map:pipelines>
      <map:pipeline>
         <map:match pattern="**">
<!-- Verify flat content. -->
            <map:select type="parameter">
               <map:parameter name="parameter-selector-test" value="{publication:contenttype}"/>
               <map:when test="flat">
               </map:when>
               <map:otherwise>
                  <map:generate src="module:///hierarchical.html"/> 
                  <map:serialize type="html"/>
               </map:otherwise>
            </map:select>
<!-- Because Cocoon's Aggregator does not understand Generators -->
            <map:match pattern="all">
               <map:generate type="sitetree"/>
               <map:serialize type="xml"/>
            </map:match>
            <map:match pattern="request">
               <map:generate type="request"/>
               <map:serialize type="xml"/>
            </map:match>
<!-- Edit Structure. -->
            <map:match pattern="{module:module}/">
               <map:call resource="default"/>
            </map:match>
<!-- Retrieve Structure -->
            <map:match pattern="structure/*">
               <map:select type="resource-exists">
   <!-- Get Structure as Design Resource if exists. -->
                  <map:when test="structure:/{1}">
                     <map:generate src="structure:/{1}!edit"/>
                  </map:when>
   <!-- From development of Lenya 1.3.  Structures were stored in content/relation before becoming Design Resources. -->
                  <map:when test="module:///../../pubs/{publication:publication}/content/relation/{1}.xml">
                     <map:generate src="module:///../../pubs/{publication:publication}/content/relation/{1}.xml"/>
                  </map:when>
   <!-- Defaults to create new Structure -->
                  <map:otherwise>
                     <map:generate src="empty:resources"/>
                  </map:otherwise>
               </map:select>
               <map:serialize type="xml"/>
            </map:match>
<!-- Save -->
            <map:match pattern="{module:module}/save/*">
               <map:aggregate element="data">
                  <map:part src="cocoon:/request"/>
                  <map:part src="cocoon:/all"/>
               </map:aggregate>
               <map:transform src="module:///save.xsl">
                  <map:parameter name="module" value="{module:module}"/>
                  <map:parameter name="name" value="{1}"/>
                  <map:parameter name="publication" value="{publication:publication}"/>
                  <map:parameter name="publicationname" value="{publication:name}"/>
               </map:transform>
               <map:select type="resource-exists">
                  <map:when test="structure:/{1}">
                  </map:when>
                  <map:otherwise>
                     <!-- If no Design Resource, create it. -->
                     <map:transform type="new-structure"/>
                  </map:otherwise>
               </map:select>
               <!-- Create revision -->
<!--               <map:transform src="module:///clean.xsl"/>
-->
               <map:transform type="revise-structure" src="{1}"/>
              <!-- Sensible return after save -->
               <map:transform src="module:///finish.xsl">
                  <map:parameter name="module" value="{module:module}"/>
                  <map:parameter name="structure" value="{1}"/>
                  <map:parameter name="publication" value="{publication:publication}"/>
               </map:transform>
               <map:serialize type="html"/>
            </map:match>
<!-- Edit -->
            <!-- module/structure -->
            <map:match pattern="{module:module}/*">
               <map:aggregate element="content">
                  <map:part src="cocoon:/all"/>
                  <map:part src="cocoon:/structure/{1}"/>
               </map:aggregate>
               <map:transform src="module:///structure.xsl">
                  <map:parameter name="module" value="{module:module}"/>
                  <map:parameter name="name" value="{1}"/>
                  <map:parameter name="publication" value="{publication:publication}"/>
                  <map:parameter name="publicationname" value="{publication:name}"/>
               </map:transform>
               <map:transform type="i18n"/>
               <map:serialize type="html"/>
            </map:match>
            <map:call resource="default"/>
         </map:match>
      </map:pipeline>
   </map:pipelines>
</map:sitemap>
