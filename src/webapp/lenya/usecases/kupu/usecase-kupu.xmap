<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!-- $Id$ -->

<!--
  Kupu usecase sitemaps. Integrates the Kupu editor (http://kupu.oscom.org/) into Lenya.
  Most matchers serve as callbacks for Kupu running in a client's browser.
  Make sure that Kupu is installed under lenya/resources/kupu.
  
  Most of (re)sources used in generators and transfomers of this sitemap
  are located in the Kupu distribution.
  
  Enjoy using Kupu.
-->

<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
  <!-- =========================== Components ================================ -->
  <map:components/>
  <!-- =========================== Resources ================================ -->
  <map:resources>
    <map:resource name="style-cms-page">
      <map:transform type="i18n">      
        <map:parameter name="locale" value="{request:locale}"/>
      </map:transform>    
      <map:transform src="{global:basedir}/xslt/util/page2xhtml.xsl">
        <map:parameter name="contextprefix" value="{request:contextPath}"/>
      </map:transform>
      <map:transform src="{global:basedir}/xslt/util/strip_namespaces.xsl"/>
      <map:serialize type="xhtml"/>
    </map:resource>    
  </map:resources>  
  <!-- =========================== Flow ===================================== -->
  <map:flow language="javascript">
    <map:script src="usecase-kupu.js"/>
    <map:script src="../edit-document.js"/>
  </map:flow>
  <!-- =========================== Pipelines ================================ -->  
  <map:pipelines>
    
    <map:component-configurations>
      <global-variables>
        <!-- To access core resources -->
        <basedir>../..</basedir>
        <resourceIconUrl>kupu/apache-lenya/lenya/images/right_arrow.png</resourceIconUrl>
      </global-variables>
    </map:component-configurations>


    <map:pipeline internal-only="true">
      <map:match pattern="kupu-stream">
        <map:generate type="stream"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!-- Flow callbacks -->
      <map:match pattern="sitetree_link_library_template">
        <map:generate src="{fallback:resources/kupu/apache-lenya/lenya/drawers/sitetree_link_library.xml.jx}" type="jx">
          <map:parameter name="resource-icon-url" value="{page-envelope:context-prefix}/kupu/apache-lenya/lenya/images/right_arrow.png"/>
        </map:generate>
        <map:serialize type="xml"/>
      </map:match>      
      <map:match pattern="publication_image_library_template">
        <map:generate src="{fallback:resources/kupu/apache-lenya/lenya/drawers/publication_image_library.xml.jx}" type="jx">
          <map:parameter name="resource-icon-url" value="{page-envelope:context-prefix}/{global:resourceIconUrl}"/>
        </map:generate>
        <map:serialize type="xml"/>
      </map:match>      
      <map:match pattern="request2document">
        <map:aggregate element="edit-envelope">
          <map:part element="edited" src="cocoon:/kupu-stream"/>
          <map:part element="original" 
              src="{global:basedir}/pubs/{page-envelope:publication-id}/content/authoring/{page-envelope:document-path}"/>
        </map:aggregate>              
        <map:transform src="{fallback:resources/kupu/apache-lenya/lenya/kupusave.xsl}"/>
        <map:serialize type="xml"/>
      </map:match>
    </map:pipeline>   
    
    <!-- Usecase pipeline -->  
    <map:pipeline>           
      <map:match pattern="kupu" type="usecase">
        <map:match pattern="open" type="step">
          <map:match pattern="*/authoring/**.html">
            <!-- Check if Kupu is installed -->
            <map:act type="resource-exists" 
              src="{global:basedir}/resources/kupu/apache-lenya/kupu/kupumacros.html">
              <map:act type="reserved-checkout">
                <map:generate type="serverpages" 
                  src="{global:basedir}/content/rc/{exception}.xsp">
                  <map:parameter name="user" value="{user}"/>
                  <map:parameter name="filename" value="{filename}"/>
                  <map:parameter name="date" value="{date}"/>
                  <map:parameter name="message" value="{message}"/>
                </map:generate>
                <map:transform src="{global:basedir}/xslt/rc/rco-exception.xsl"/>
                <map:call resource="style-cms-page"/>
              </map:act>
              <map:generate 
                src="{fallback:resources/kupu/apache-lenya/kupu/kupumacros.html}"/>
              <map:transform src="{fallback:resources/kupu/apache-lenya/lenya/kupumacros.xsl}">
                <map:parameter name="contentfile" 
                  value="{request:requestURI}?lenya.usecase=kupu&amp;lenya.step=content"/>
                <map:parameter name="context-prefix" value="{request:contextPath}"/>
                <!-- Only used to display the document path of the edited doc  -->
                <map:parameter name="document-path" value="{page-envelope:document-path}"/>
                <map:parameter name="save-destination" 
                  value="{request:requestURI}?lenya.usecase=kupu&amp;lenya.step=save"/>
                <map:parameter name="exit-destination" 
                  value="{request:requestURI}?lenya.usecase=kupu&amp;lenya.step=exit"/>
                <map:parameter name="reload-after-save" value="1"/>
                <map:parameter name="use-css" value="1"/>
                <map:parameter name="imagedrawer-xsl-uri" 
                  value="{request:requestURI}?lenya.usecase=kupu&amp;lenya.step=imagedrawerxsl"/>
                <map:parameter name="linkdrawer-xsl-uri" 
                  value="{request:requestURI}?lenya.usecase=kupu&amp;lenya.step=linkdrawerxsl"/>
                <map:parameter name="image-libraries-uri" 
                  value="{request:requestURI}?lenya.usecase=kupu&amp;lenya.step=image_libraries"/>
                <map:parameter name="link-libraries-uri" 
                  value="{request:requestURI}?lenya.usecase=kupu&amp;lenya.step=link_libraries"/>
              </map:transform>
              <map:serialize type="html"/>
            </map:act>
            <!-- If Kupu is not installed; Action failed -->
            <map:generate src="{global:basedir}/resources/misc/kupu/download.xhtml"/>
            <map:call resource="style-cms-page"/>
          </map:match>
        </map:match>
        <!-- Requested by Kupu to load the document into the editor -->    
        <map:match pattern="content" type="step">
          <map:match pattern="*/authoring/**">
            <map:generate src="{global:basedir}/pubs/{1}/content/authoring/{page-envelope:document-path}"/>
            <map:transform 
              src="{fallback:resources/kupu/apache-lenya/lenya/content2edit.xsl}">
              <map:parameter name="css" 
                value="{page-envelope:context-prefix}/{1}/authoring/css/page.css"/>
              <map:parameter name="nodeid" value="{page-envelope:document-node-id}"/>
            </map:transform>
            <map:transform src="{global:basedir}/xslt/util/strip_namespaces.xsl"/>
              <map:serialize type="html"/>
          </map:match>            
        </map:match>
        
        <!-- Kupu Image Drawer -->
        <map:match pattern="*drawerxsl" type="step">
          <map:generate type="jx" src="{fallback:resources/kupu/apache-lenya/lenya/drawers/{1}drawer.xsl}">
            <!-- We need to use the hole uri scheme i.e. http://servername:port/, since IE xslt processor  
                 throws an access violation upon loading of xslts from the internet.
             -->
            <map:parameter name="import-stylesheet-url"
              value="{request:scheme}://{request:serverName}:{request:serverPort}{page-envelope:context-prefix}/kupu/common/kupudrawers/drawer.xsl"/>
          </map:generate>  
          <map:serialize type="xml"/>
        </map:match>
        
        <map:match pattern="image_libraries" type="step">
          <map:generate src="{fallback:resources/kupu/apache-lenya/lenya/drawers/imagelibraries.xml.jx}" type="jx">
            <map:parameter name="pubLibUrl" value="{request:requestURI}?lenya.usecase=kupu&amp;lenya.step=publication_image_library"/>
            <map:parameter name="pageLibUrl" value="{request:requestURI}?lenya.usecase=kupu&amp;lenya.step=page_image_library"/>
            <map:parameter name="imageBaseUrl" value="{page-envelope:context-prefix}/kupu/apache-lenya/lenya/images"/>
          </map:generate>
          <map:serialize type="xml"/>
        </map:match>
        <map:match pattern="link_libraries" type="step">
          <map:generate src="{fallback:resources/kupu/apache-lenya/lenya/drawers/linklibraries.xml.jx}" type="jx">
            <map:parameter name="pubLibUrl" value="{request:requestURI}?lenya.usecase=kupu&amp;lenya.step=sitetree_link_library"/>
            <map:parameter name="pageLibUrl" value="{request:requestURI}?lenya.usecase=kupu&amp;lenya.step=other_link_library"/>
            <map:parameter name="imageBaseUrl" value="{page-envelope:context-prefix}/kupu/apache-lenya/lenya/images"/>
          </map:generate>
          <map:serialize type="xml"/>
        </map:match>
                  
        <map:match pattern="page_image_library" type="step">
          <map:generate src="{fallback:content/info/assets.xsp}" type="serverpages"/>
          <map:transform src="{fallback:resources/kupu/apache-lenya/lenya/pageassets2kupulibrary.xsl}">
            <map:parameter name="iconUrl" value="{page-envelope:context-prefix}/{global:resourceIconUrl}"/>
	    <map:parameter name="nodeid" value="{page-envelope:document-node-id}"/>
          </map:transform>
          <map:serialize type="xml"/>            
        </map:match>
        <map:match pattern="sitetree_link_library" type="step">
          <map:call function="sitetree_link_library"/>
        </map:match>        
        <map:match pattern="publication_image_library" type="step">
          <map:call function="publication_image_library">
            <map:parameter name="template" value="publication_image_library_template"/>
            <map:parameter name="iconUrl" value="{page-envelope:context-prefix}/{global:resourceIconUrl}"/>
          </map:call>
        </map:match>
        
        <map:match pattern="*_library" type="step">
          <map:generate src="{fallback:resources/kupu/apache-lenya/lenya/drawers/{1}_library.xml.jx}" type="jx"/>
          <map:serialize type="xml"/>
        </map:match>
        <!-- /Kupu Image Drawer -->  
        
        <!-- Checkin document on exit and trigger workflow -->
        <map:match pattern="exit" type="step">
          <map:act type="reserved-checkin">
            <map:generate src="{global:basedir}/content/rc/{exception}.xsp" type="serverpages">
              <map:parameter name="user" value="{user}"/>
              <map:parameter name="filename" value="{filename}"/>
              <map:parameter name="checkType" value="{checkType}"/>
              <map:parameter name="date" value="{date}"/>
              <map:parameter name="message" value="{message}"/>
            </map:generate>
            <map:transform src="{global:basedir}/xslt/rc/rco-exception.xsl"/>
            <map:call resource="style-cms-page"/>
         </map:act>
          <map:redirect-to uri="{request:requestURI}"/>
        </map:match>
      
        <!-- 
             Kupu uses PUT to transmit the edited file for save.
             The problem is, Kupu removes namespace information. 
             That means we can not use the StreamGenerator, because 
             it complains about an unbound element.
        -->
        <map:match pattern="save" type="step">
          <map:select type="request-method">
            <map:when test="PUT">
              <map:act type="reserved-checkout-test">
                <map:generate type="serverpages" 
                  src="{global:basedir}/../../content/rc/{exception}.xsp">
                  <map:parameter name="user" value="{user}"/>
                  <map:parameter name="filename" value="{filename}"/>
                  <map:parameter name="date" value="{date}"/>
                  <map:parameter name="message" value="{message}"/>
                </map:generate>
                <map:transform src="{global:basedir}/../../xslt/rc/rco-exception.xsl"/>
                <map:call resource="style-cms-page"/>
              </map:act>
              
              <map:call function="editDocument">
                <map:parameter name="sourceUri" value="cocoon:/request2document"/>
                <map:parameter name="useBuffer" value="true"/>
                <map:parameter name="noCheckin" value="true"/>
              </map:call>
            </map:when>
          </map:select>
        </map:match>
      </map:match>
    </map:pipeline>
  </map:pipelines>

</map:sitemap>
