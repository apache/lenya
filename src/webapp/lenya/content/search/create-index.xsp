<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!-- $Id$ -->

<xsp:page language="java"
          xmlns:xsp="http://apache.org/xsp"
          xmlns:xsp-request="http://apache.org/xsp/request/2.0"
          xmlns:page="http://apache.org/cocoon/lenya/cms-page/1.0"
          xmlns:input="http://apache.org/cocoon/xsp/input/1.0"
          >

  <xsp:structure>
   <xsp:include>org.apache.avalon.framework.context.ContextException</xsp:include>
   <xsp:include>org.apache.avalon.framework.component.ComponentException</xsp:include>
   <xsp:include>org.apache.cocoon.ProcessingException</xsp:include>
   <xsp:include>java.net.URL</xsp:include>
   <xsp:include>java.net.MalformedURLException</xsp:include>
   <xsp:include>org.apache.cocoon.components.language.markup.xsp.XSPUtil</xsp:include>
   <xsp:include>org.apache.avalon.framework.context.ContextException</xsp:include>
   <xsp:include>org.apache.cocoon.components.search.*</xsp:include>
   <xsp:include>org.apache.lucene.store.Directory</xsp:include>
   <xsp:include>org.apache.lucene.analysis.Analyzer</xsp:include>
  </xsp:structure>

  <xsp:logic>
  File workDir = null;
  /** Contextualize this class */
  public void contextualize(Context context) throws ContextException {
    super.contextualize( context );
    workDir = (File) context.get(Constants.CONTEXT_WORK_DIR);
  }
  
  LuceneCocoonIndexer lcii;
  Analyzer analyzer = LuceneCocoonHelper.getAnalyzer( "org.apache.lucene.analysis.standard.StandardAnalyzer" );
  
  void createIndex(String baseURL, boolean create,String publication_id) throws ProcessingException {
    try {
      
      lcii = (LuceneCocoonIndexer)this.manager.lookup( LuceneCocoonIndexer.ROLE );
      //Directory directory = LuceneCocoonHelper.getDirectory( new File( workDir, "index" ), create );
      Directory directory = LuceneCocoonHelper.getDirectory( new File( workDir, "lucene-search-index-"+publication_id ), create );
      lcii.setAnalyzer( analyzer );
      // "http://localhost:8080/cocoon/documents/index.html"
      URL base_url = new URL( baseURL );
      lcii.index( directory, create, base_url );
    } catch (MalformedURLException mue) {
      throw new ProcessingException( "MalformedURLException in createIndex()!", mue );
    } catch (IOException ioe) {
      // ignore ??
      throw new ProcessingException( "IOException in createIndex()!", ioe );
    } catch (ComponentException ce) {
      // ignore ??
      throw new ProcessingException( "ComponentException in createIndex()!", ce );
    } finally {
      if (lcii != null) {
        this.manager.release( lcii );
      }
      lcii = null;
    }
  }

  </xsp:logic>

  <page>
    <xsp:logic>
      boolean indexHasBeenCreated=false;
      boolean create;
      String createParam = <xsp-request:get-parameter name="create" />;
      if (createParam == null) {
        create = false;
      } else {
        create = true;
      }
      
      String baseURL = <xsp-request:get-parameter name="baseURL" />;
      String publication_id = <input:get-attribute module="page-envelope" name="publication-id" as="string"/>;
      if (baseURL != null &amp;&amp; baseURL.length() > 0 &amp;&amp; publication_id != null &amp;&amp; publication_id.length() > 0) {
        createIndex(baseURL, create, publication_id);
        indexHasBeenCreated=true;
      }
      if (baseURL == null || baseURL.length() &lt; 1) {
        baseURL = 
          "http://" + 
          <xsp-request:get-server-name/> +
          ":" + <xsp-request:get-server-port/> +
          <xsp-request:get-context-path/> + "/" + <input:get-attribute module="page-envelope" name="publication-id" as="string"/> + "/index.html";
      }
    </xsp:logic>
    <content>
    <page:page>
      <page:title>Search</page:title>
      <page:body>
    <div class="lenya-box">
      <div class="lenya-box-title">Create a search index</div>
      <div class="lenya-box-body">
      <xsp:logic>
        if(indexHasBeenCreated){
          <xsp:content><index_has_been_created/><h3>Index has been created for Publication <xsp:expr>publication_id</xsp:expr></h3></xsp:content>
          }  
      </xsp:logic>
        This process might take some time (follow the tail of your logfiles
        to see the indexer in progress).
        <form action="" name="create-index-form">
        <table class="lenya-table-noborder">
          <tr>
            <td>BaseURL</td>
            <td>
              <input type="text" name="baseURL" size="60" class="lenya-form-element">
                <xsp:attribute name="value"><xsp:expr>baseURL</xsp:expr></xsp:attribute>
              </input>
            </td>
          </tr>
          <tr>
            <td colspan="2">
              <input type="radio" name="create" value="true" checked="checked"/>
              Create/Overwrite the Index, or
              <input type="radio" name="create" value="false"/>
              Update the existing Index
            </td>
          </tr>
          <tr>
            <td colspan="2">
              <input type="submit" name="find" value="Create"/>
            </td>
          </tr>
        </table>
        </form>
      </div>
    </div>
      </page:body>
    </page:page>
    </content>
  </page>

</xsp:page>

