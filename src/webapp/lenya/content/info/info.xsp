<?xml version="1.0"?>

<xsp:page 
  language="java" 
  xmlns:xsp="http://apache.org/xsp"
  xmlns:xsp-lenya="http://apache.org/cocoon/lenya/xsp/1.0"
  xmlns:lenya-info="http://apache.org/cocoon/lenya/info/1.0"
  xmlns:li="http://apache.org/cocoon/lenya/info/1.0"
  xmlns:wf="http://apache.org/cocoon/lenya/workflow/1.0"
  xmlns:rc="http://apache.org/cocoon/lenya/rc/1.0"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:input="http://apache.org/cocoon/xsp/input/1.0"
  xmlns:request="http://apache.org/xsp/request/2.0"
>

  <xsp:structure>
    <xsp:include>org.apache.lenya.cms.rc.RevisionController</xsp:include>
    <xsp:include>java.io.IOException</xsp:include>
    <xsp:include>org.apache.cocoon.environment.Session</xsp:include>
    <xsp:include>org.apache.lenya.cms.ac.Item</xsp:include>
    <xsp:include>org.apache.lenya.cms.ac.ItemManager</xsp:include>
    <xsp:include>org.apache.lenya.cms.ac.Role</xsp:include>
    <xsp:include>org.apache.lenya.cms.ac.RoleManager</xsp:include>
    <xsp:include>org.apache.lenya.cms.ac2.Accreditable</xsp:include>
    <xsp:include>org.apache.lenya.cms.ac2.Credential</xsp:include>
    <xsp:include>org.apache.lenya.cms.ac2.xsp.PolicyHelper</xsp:include>
    <xsp:include>org.apache.lenya.cms.ac2.xsp.CredentialWrapper</xsp:include>
    <xsp:include>org.apache.lenya.cms.publication.Publication</xsp:include>
    <xsp:include>org.apache.lenya.cms.rc.RCEnvironment</xsp:include>
    <xsp:include>org.apache.lenya.xml.DocumentHelper</xsp:include>
  </xsp:structure>                                                                                                                          

<lenya-info:info>
  <lenya-info:overview>
        <dc:title><input:get-attribute module="page-envelope" as="object" name="document-dc-title"/></dc:title>
		<lenya-info:abstract><input:get-attribute module="page-envelope" as="object" name="document-abstract"/></lenya-info:abstract>
  		<lenya-info:status></lenya-info:status>
        <dc:language><input:get-attribute module="page-envelope" as="object" name="document-language"/></dc:language>
   		<lenya-info:lastmodifiedby></lenya-info:lastmodifiedby>
   		<lenya-info:lastmodified><input:get-attribute module="page-envelope" as="object" name="document-lastmodified"/></lenya-info:lastmodified>
  		<lenya-info:documentid><input:get-attribute module="page-envelope" as="object" name="document-id"/></lenya-info:documentid>
  		<lenya-info:area></lenya-info:area>
  </lenya-info:overview>  
  <lenya-info:meta>  
        <dc:title><input:get-attribute module="page-envelope" as="object" name="document-dc-title"/></dc:title>
        <dc:creator><input:get-attribute module="page-envelope" as="object" name="document-dc-creator"/></dc:creator>
        <dc:subject><input:get-attribute module="page-envelope" as="object" name="document-dc-subject"/></dc:subject>
        <dc:description><input:get-attribute module="page-envelope" as="object" name="document-dc-description"/></dc:description>
        <dc:date></dc:date>
        <dc:rights><input:get-attribute module="page-envelope" as="object" name="document-dc-rights"/></dc:rights>
        </lenya-info:meta>
  <lenya-info:assets>
		<lenya-info:asset/>
  </lenya-info:assets>  
  <lenya-info:workflow>
    	<wf:version date="(?)" state="redaktion" user="michael"/>
   		<wf:version date="(?)" event="publish" state="review" user="gregor"/>
  </lenya-info:workflow>  
  <rc:revisions>
  
  <xsp:logic>
    String docId = (String)<input:get-attribute module="page-envelope" as="object" name="document-id"/>;
    Session session=request.getSession(true);
    session.setAttribute("org.apache.lenya.cms.info.target",docId);
    session.setAttribute("org.apache.lenya.cms.info.area", request.getParameter("lenya.area"));
    Publication publication = (Publication)<input:get-attribute module="page-envelope" as="object" name="publication"/>;

      String rootDir=publication.getEnvironment().getPublicationPath();

      String servletContextPath = publication.getServletContext().getCanonicalPath();
      
      RCEnvironment rcEnvironment = new RCEnvironment(servletContextPath);
      String rcmlDirectory = rcEnvironment.getRCMLDirectory();
      rcmlDirectory=rootDir+rcmlDirectory;
      String backupDirectory = rcEnvironment.getBackupDirectory();
      backupDirectory=rootDir+backupDirectory;

      RevisionController rc = new RevisionController(rcmlDirectory, backupDirectory, rootDir);

      String filename=publication.getEnvironment().getAuthoringPath() +docId + "/index_" + (String)<input:get-attribute module="page-envelope" as="object" name="document-language"/> + ".xml";


      org.w3c.dom.Document rcmlDoc=null;
      try {
        rcmlDoc=rc.getRCML(filename).getDOMDocumentClone();
      } catch (Exception e) {
        <rc:exception>rollback: Unable to get DOM doc for rcml file, caught exception: <xsp:expr>e.toString()</xsp:expr></rc:exception>
      }                                                                                                                                    

      org.w3c.dom.Element rootE= (org.w3c.dom.Element)rcmlDoc.getDocumentElement();
      org.w3c.dom.NodeList timeElements = rootE.getElementsByTagName("Time");

      for (int i = 0; i &lt; timeElements.getLength(); i++) {
        org.w3c.dom.Element time = (org.w3c.dom.Element) timeElements.item(i);
        time.setAttribute("humanreadable", new Date(new Long(time.getFirstChild().getNodeValue()).longValue()).toString());
      }
      
    </xsp:logic>
     <xsp:expr>rootE</xsp:expr>   
   </rc:revisions>
   
    <xsp:logic>
      String[] types = { "user", "group", "iprange", "role" };
      for (int i = 0; i &lt; types.length; i++) {
      <li:items>
        <xsp:attribute name="type"><xsp:expr>types[i]</xsp:expr></xsp:attribute>
      <xsp:logic>
      ItemManager manager = null;
      
      if (types[i].equals("user")) {
          manager = (ItemManager) <input:get-attribute module="access-control" name="user-manager" as="object"/>;
      }
      else if (types[i].equals("group")) {
          manager = (ItemManager) <input:get-attribute module="access-control" name="group-manager" as="object"/>;
      }
      else if (types[i].equals("iprange")) {
          manager = (ItemManager) <input:get-attribute module="access-control" name="iprange-manager" as="object"/>;
      }
      else if (types[i].equals("role")) {
          manager = (ItemManager) <input:get-attribute module="access-control" name="role-manager" as="object"/>;
      }
           
      for (java.util.Iterator items = manager.getItems(); items.hasNext(); ) {
          Item item = (Item) items.next();
          <li:item>
            <xsp:attribute name="id"><xsp:expr>item.getId()</xsp:expr></xsp:attribute>
            <xsp:expr>item.getName()</xsp:expr>
          </li:item>
			}
			</xsp:logic>
      </li:items>
      
      String[] operations = { "add", "delete" };
      
      for (int j = 0; j &lt; operations.length; j++) {
					if (request.getParameter(operations[j] + "_credential_" + types[i]) != null) {
							String area = request.getParameter("area");
							String roleId = request.getParameter("role_id");
							
							String accreditableId = request.getParameter("accreditable_id");
							Item item = manager.getItem(accreditableId);
							
							RoleManager roleManager = (RoleManager)
									<input:get-attribute module="access-control" name="role-manager" as="object"/>;
							Role role = roleManager.getRole(roleId);
							PolicyHelper.manipulateCredential(objectModel, item, role, area, operations[j], this.manager);
					}
      }
      
      }
      
      
      
      String[] areas = { "authoring", "live" };
      for (int i = 0; i &lt; areas.length; i++) {
        <li:permissions>
          <xsp:attribute name="area"><xsp:expr>areas[i]</xsp:expr></xsp:attribute>
          
          <xsp:logic>
          	
          CredentialWrapper[] credentials = PolicyHelper.getURICredentials(objectModel, areas[i], manager);
          for (int j = 0; j &lt; credentials.length; j++) {
              <li:credential type="uri">
								<xsp:attribute name="accreditable-type"><xsp:expr>credentials[j].getType()</xsp:expr></xsp:attribute>
								<xsp:attribute name="accreditable-id"><xsp:expr>credentials[j].getAccreditableId()</xsp:expr></xsp:attribute>
								<xsp:attribute name="accreditable-name"><xsp:expr>credentials[j].getAccreditableName()</xsp:expr></xsp:attribute>
								<xsp:attribute name="role-id"><xsp:expr>credentials[j].getRoleId()</xsp:expr></xsp:attribute>
								<xsp:attribute name="role-name"><xsp:expr>credentials[j].getRoleName()</xsp:expr></xsp:attribute>
              </li:credential>
          }
          	
          credentials = PolicyHelper.getParentCredentials(objectModel, areas[i], manager);
          for (int j = 0; j &lt; credentials.length; j++) {
              <li:credential type="parent">
								<xsp:attribute name="accreditable-type"><xsp:expr>credentials[j].getType()</xsp:expr></xsp:attribute>
								<xsp:attribute name="accreditable-id"><xsp:expr>credentials[j].getAccreditableId()</xsp:expr></xsp:attribute>
								<xsp:attribute name="accreditable-name"><xsp:expr>credentials[j].getAccreditableName()</xsp:expr></xsp:attribute>
								<xsp:attribute name="role-id"><xsp:expr>credentials[j].getRoleId()</xsp:expr></xsp:attribute>
								<xsp:attribute name="role-name"><xsp:expr>credentials[j].getRoleName()</xsp:expr></xsp:attribute>
              </li:credential>
          }
          	
          </xsp:logic>	
          
        </li:permissions>
      }
    </xsp:logic>
   
</lenya-info:info>

</xsp:page>