<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 1999-2004 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!-- $Id$ -->

<project name="Ant Test Project" default="test" basedir=".">

<property name="text" value="Hello World!"/>

<property name="pub.dir" value=""/>
<property name="pub.id" value=""/>
<property name="sitetree" value="sitetree.xml"/>
<property name="authoring.area" value="authoring"/>
<property name="authoring.dir" value="content/authoring"/>
<property name="authoring.resource.dir" value="resources/authoring"/>
<property name="live.dir" value="content/live"/>
<property name="live.resource.dir" value="resources/live"/>
<property name="live.area" value="live"/>
<property name="archive.dir" value="content/archive"/>
<property name="archive.area" value="archive"/>
<property name="archive.resource.dir" value="resources/archive"/>
<property name="trash.dir" value="content/trash"/>
<property name="trash.area" value="trash"/>
<property name="trash.resource.dir" value="resources/trash"/>
<property name="rcml.dir" value="content/rcml"/>
<property name="rcbak.dir" value="content/rcbak"/>
<property name="policies.dir" value="config/ac/policies"/>

<!-- workflow-->
<property name="wf.history.trash.dir" value="content/workflow/history/trash"/>

<!-- publishing properties -->
<property name="replication.dir" value="content/replication/pending"/>
<property name="export.server-port" value=""/>
<property name="export.context-path" value=""/>
<property name="export.dir" value="work/export/pending"/>
<property name="export.expression" value="/lenya/default/live/"/>
<property name="export.replacement" value="/"/>
<property name="export.uris" value=""/>

<property name="servlet.context" value=""/>

<!--copy/move/rename properties -->
<property name="node.firstdocumentid" value=""/>
<property name="node.secdocumentid" value=""/>
<property name="node.newdocumentid" value=""/>
<property name="file.firstdocumentdir" value=""/>
<property name="file.secdocumentdir" value=""/>
<property name="firstarea" value=""/>
<property name="secarea" value=""/>
<property name="copy.userid" value=""/>
<property name="copy.ipaddress" value=""/>
<property name="node.refdocumentid" value=""/>

<!--properties setted by task SetAreaProperties-->
<property name="firstarea.dir" value=""/>
<property name="secarea.dir" value=""/>
<property name="secarea.resource.dir" value=""/>

<taskdef name="copyresources" classname="org.apache.lenya.cms.ant.CopyResourcesTask"/>

  <taskdef name="mapdocumentidtofile" classname="org.apache.lenya.cms.ant.DocumentIdToFile"/>

  <target name="test">
    <echo>This is a test of the AntTask: ${text}</echo>
    <taskdef name="ant-test" classname="org.apache.lenya.cms.ant.TestTask"/>
    <ant-test/>
  </target>


<target name="notification">
	<property name="notification.from" value="lenya@127.0.0.1"/>
	<property name="notification.tolist" value=""/>
	<property name="notification.subject" value=""/>
	<property name="notification.message" value=""/>
	<property name="mail.mailhost" value="localhost"/>
	
	<echo>Sending Mail</echo>
	<echo>From:     [${notification.from}]</echo>
	<echo>To:       [${notification.tolist}]</echo>
	<echo>Subject:  [${notification.subject}]</echo>
	<echo>Message:  [${notification.message}]</echo>
	<echo>Mailhost: [${mail.mailhost}]</echo>
	
	<mail
		from="${notification.from}"
		tolist="${notification.tolist}"
		subject="${notification.subject}"
		message="${notification.message}"
		mailhost="${mail.mailhost}"
		/>
</target>


  <!-- Save the dublin core meta data -->
  <target name="save-meta-data">
    
    <property name="save.meta.documentid" value=""/>
    <property name="save.meta.area" value=""/>
    <property name="save.meta.creator" value=""/>
    <property name="save.meta.title" value=""/>
    <property name="save.meta.description" value=""/>
    <property name="save.meta.subject" value=""/>
    <property name="save.meta.language" value=""/>
    <property name="save.meta.publisher" value=""/>
    <property name="save.meta.rights" value=""/>

    <echo>Writing meta data</echo>
    <echo>meta.documentid ${save.meta.documentid}</echo>
    <echo>meta.area ${save.meta.area}</echo>
    <echo>meta.creator ${save.meta.creator}</echo>
    <echo>meta.title ${save.meta.title}</echo>
    <echo>meta.description ${save.meta.description}</echo>
    <echo>meta.subject ${save.meta.subject}</echo>
    <echo>meta.language ${save.meta.language}</echo>
    <echo>meta.publisher ${save.meta.publisher}</echo>
    <echo>meta.rights ${save.meta.rights}</echo>

    <taskdef name="write-dc-params" classname="org.apache.lenya.cms.ant.WriteDCParametersTask"/>
    <write-dc-params
      documentid="${save.meta.documentid}"
      area="${save.meta.area}"
      language="${save.meta.language}"
      title="${save.meta.title}"
      creator="${save.meta.creator}"
      subject="${save.meta.subject}"
      description="${save.meta.description}"
      publisher="${save.meta.publisher}"
      rights="${save.meta.rights}"
      />
  </target>

  <!-- Remove an asset -->
  <target name="remove-asset">
    <property name="remove.asset.document-id" value=""/>
    <property name="remove.asset.name" value=""/>
    <echo>Remove file: ${pub.dir}/${authoring.resource.dir}/${remove.asset.document-id}/${remove.asset.name}</echo>
    <echo>Remove file: ${pub.dir}/${authoring.resource.dir}/${remove.asset.document-id}/${remove.asset.name}.meta</echo>
    <delete file="${pub.dir}/${authoring.resource.dir}/${remove.asset.document-id}/${remove.asset.name}"/>
    <delete file="${pub.dir}/${authoring.resource.dir}/${remove.asset.document-id}/${remove.asset.name}.meta"/>
  </target>

  <!-- Insert an asset -->
  <target name="insert-asset">
    <property name="insert.asset.assetXPath" value=""/>
    <property name="insert.asset.insertWhere" value=""/>
    <property name="insert.asset.insertTemplate" value="insertAsset.xml"/>
    <property name="insert.asset.insertReplace" value=""/>
    <property name="insert.asset.area" value=""/>
    <property name="insert.asset.document-id" value=""/>
    <property name="insert.asset.language" value=""/>
    <property name="asset.data" value=""/>
    <property name="insert.asset.type" value=""/>
    <property name="insert.asset.size" value=""/>
    <property name="insert.asset.caption" value=""/>
    <property name="insert.asset.link" value=""/>

    <echo>Generate temporary xsl style sheet with ${pub.dir}/../xslt/util/generate-insertAsset-xsl.xsl </echo>
    <echo>from ${pub.dir}/config/assets/${insert.asset.insertTemplate}</echo>
    <tempfile property="temp.stylesheet" destDir="work"/>
    <tempfile property="temp.file" destDir="work"/>
    <xslt in="${pub.dir}/config/assets/${insert.asset.insertTemplate}"
      out="${temp.stylesheet}" 
      force="true"
      style="${pub.dir}/../../xslt/util/generate-insertAsset-xsl.xsl">
      <param name="assetXPath" expression="${insert.asset.assetXPath}"/>
      <param name="insertWhere" expression="${insert.asset.insertWhere}"/>
      <param name="insertReplace" expression="${insert.asset.insertReplace}"/>
    </xslt>

    <property name="document.file" value=""/>
    <mapdocumentidtofile
      area="${insert.asset.area}" 
      documentid="${insert.asset.document-id}"
      language="${insert.asset.language}"
      propertyname="document.file" 
      />

    <basename property="asset.filename" file="${asset.data}"/>
    <echo>Apply temporary stylesheet (${temp.file}) on document ${document.file}</echo>
    <echo>with args data: ${asset.filename}</echo>
    <echo>type: ${insert.asset.type}</echo>
    <echo>size: ${insert.asset.size}</echo>
    <echo>caption: ${insert.asset.caption}</echo>
    <echo>link: ${insert.asset.link}</echo>
    <xslt in="${document.file}"
      out="${temp.file}" 
      force="true"
      style="${temp.stylesheet}">
      <param name="data" expression="${asset.filename}"/>
      <param name="type" expression="${insert.asset.type}"/>
      <param name="size" expression="${insert.asset.size}"/>
      <param name="caption" expression="${insert.asset.caption}"/>
      <param name="link" expression="${insert.asset.link}"/>
    </xslt>
    <move file="${temp.file}" tofile="${document.file}"/>
  </target>

  <taskdef name="computesecdocumentid" classname="org.apache.lenya.cms.ant.ComputeCopyDocumentId"/>
  <target name = "newcopydocumentid">
    <computesecdocumentid
      area="${authoring.area}"
      firstdocumentid="${node.firstdocumentid}"
      secdocumentid="${node.secdocumentid}"
      />
    <echo>the document id for the copy is now ${node.newdocumentid}</echo>
  </target>

  <taskdef name="computearchivedocumentid" classname="org.apache.lenya.cms.ant.ComputeArchiveDocumentId"/>
  
  <target name = "newarchivedocumentid">
    <computearchivedocumentid
      area="${secarea}"
      firstdocumentid="${node.firstdocumentid}"
      secdocumentid="${node.secdocumentid}"
      />
    <echo>the document id for the ${secarea} is ${node.newdocumentid}</echo>
  </target>

<taskdef name="mapdocumentidtopath" classname="org.apache.lenya.cms.ant.DocumentIdToPath"/>

<target name = "firstdocumentpath">
  <mapdocumentidtopath
    area="${firstarea}" 
    documentid="${node.firstdocumentid}"
    propertyname="file.firstdocumentdir" 
  />
</target>

<target name = "secdocumentpath">
  <mapdocumentidtopath
    area="${secarea}" 
    documentid="${node.newdocumentid}"
    propertyname="file.secdocumentdir" 
  />
</target>

<target name = "livedocumentpath">
  <mapdocumentidtopath
    area="${live.area}" 
    documentid="${node.firstdocumentid}"
    propertyname="file.firstdocumentdir" 
  />
</target>

<taskdef name="copycontent" classname="org.apache.lenya.cms.ant.CopyContentTask"/>
<taskdef name="copyworkflow" classname="org.apache.lenya.cms.ant.InitCopyWorkflowTask"/>
<taskdef name="initrc" classname="org.apache.lenya.cms.ant.InitRCTask"/>

<target name = "copyDocument" depends="newcopydocumentid">
  <echo>Copy Content</echo>
  <copycontent
    firstarea = "${firstarea}"
    firstdocumentid="${node.firstdocumentid}"
    secarea="${secarea}"
    secdocumentid="${node.newdocumentid}"
  />
 
  <copyresources
    firstarea = "${firstarea}"
    firstdocumentid="${node.firstdocumentid}"
    secarea="${secarea}"
    secdocumentid="${node.newdocumentid}"
  />

  <echo>Init RC</echo>
  <initrc
    firstarea = "${firstarea}"
    firstdocumentid="${node.firstdocumentid}"
    secarea="${secarea}"
    secdocumentid="${node.newdocumentid}"
    rcmlDir = "${rcml.dir}"
	rcbakDir = "${rcbak.dir}"
	userId = "${copy.userid}"
  />

  <copyworkflow
    firstdocumentid="${node.firstdocumentid}"
    secdocumentid="${node.newdocumentid}"
    firstarea="${firstarea}"
    secarea="${secarea}"
    userid="${copy.userid}"
    machineip="${copy.ipaddress}"
  />

  <echo> Insert copied node</echo>

  <taskdef name="insertcopynode" classname="org.apache.lenya.cms.ant.InsertCopyNode"/>
  <insertcopynode
    firstdocumentid="${node.firstdocumentid}"
    secdocumentid="${node.newdocumentid}"
    firstarea="${firstarea}"
    secarea="${secarea}"
  />
 
</target>

<taskdef name="setareaproperties" classname="org.apache.lenya.cms.ant.SetAreaProperties"/>
<target name = "firstareaproperties">
  <setareaproperties
    area="${firstarea}"
	dirpropertyname="firstarea.dir"
  />
</target>

<target name = "secareaproperties">
  <setareaproperties
    area="${secarea}"
	dirpropertyname="secarea.dir"
  />
</target>
				
<taskdef name="movenode" classname="org.apache.lenya.cms.ant.MoveNode"/>
<taskdef name="moveworkflow" classname="org.apache.lenya.cms.ant.MoveWorkflowTask"/>
<taskdef name="copypolicies" classname="org.apache.lenya.cms.ant.CopyPoliciesTask"/>
<taskdef name="deleteschedulerentry" classname="org.apache.lenya.cms.ant.DeleteSchedulerEntryTask"/>
<taskdef name="deletecontent" classname="org.apache.lenya.cms.ant.DeleteContentTask"/>
<taskdef name="deleteresources" classname="org.apache.lenya.cms.ant.DeleteResourcesTask"/>
<taskdef name="deletepolicies" classname="org.apache.lenya.cms.ant.DeletePoliciesTask"/>
<taskdef name="deleterc" classname="org.apache.lenya.cms.ant.DeleteRCTask"/>

<target name = "move">
  <echo>Copy Content</echo>
  <copycontent
    firstarea = "${firstarea}"
    firstdocumentid="${node.firstdocumentid}"
    secarea="${secarea}"
    secdocumentid="${node.newdocumentid}"
  />
 
  <echo>Copy Resources</echo>
  <copyresources
    firstarea = "${firstarea}"
    firstdocumentid="${node.firstdocumentid}"
    secarea="${secarea}"
    secdocumentid="${node.newdocumentid}"
  />

  <echo>Copy Policies</echo>
  <copypolicies
    firstarea = "${firstarea}"
    firstdocumentid="${node.firstdocumentid}"
    secarea="${secarea}"
    secdocumentid="${node.newdocumentid}"
    policiesDir="${pub.dir}/${policies.dir}"
  />

  <echo>Copy Revision</echo>
  <mkdir dir="${pub.dir}/${rcml.dir}/${firstarea.dir}/${file.firstdocumentdir}"/>
  <copy todir="${pub.dir}/${rcml.dir}/${secarea.dir}/${file.secdocumentdir}">
    <fileset dir="${pub.dir}/${rcml.dir}/${firstarea.dir}/${file.firstdocumentdir}/"/>
  </copy>

  <echo>Copy Backups</echo>
  <mkdir dir="${pub.dir}/${rcbak.dir}/${firstarea.dir}/${file.firstdocumentdir}"/>
  <copy todir="${pub.dir}/${rcbak.dir}/${secarea.dir}/${file.secdocumentdir}">
    <fileset dir="${pub.dir}/${rcbak.dir}/${firstarea.dir}/${file.firstdocumentdir}/"/>
  </copy>

 <moveworkflow
    firstdocumentid="${node.firstdocumentid}"
    secdocumentid="${node.newdocumentid}"
    firstarea="${firstarea}"
    secarea="${secarea}"
  />
<!-- FIXME: temporarily disabled. see http://nagoya.apache.org/bugzilla/show_bug.cgi?id=27252  
  <deleteschedulerentry
    documentid="${node.firstdocumentid}"
    area="${firstarea}"
    servletcontextpath="${servlet.context}"
  />
-->
  <movenode
    firstdocumentid="${node.firstdocumentid}"
    secdocumentid="${node.newdocumentid}"
    firstarea="${firstarea}"
    secarea="${secarea}"
    refdocumentid = "${node.refdocumentid}" 
  />

  <deletecontent
    firstarea = "${firstarea}"
    firstdocumentid="${node.firstdocumentid}"
    secarea="${secarea}"
    secdocumentid="${node.newdocumentid}"
  />

  <deleteresources
    firstarea = "${firstarea}"
    firstdocumentid="${node.firstdocumentid}"
    secarea="${secarea}"
    secdocumentid="${node.newdocumentid}"
  />

  <deletepolicies
    firstarea = "${firstarea}"
    firstdocumentid="${node.firstdocumentid}"
    secarea="${secarea}"
    secdocumentid="${node.newdocumentid}"
    policiesDir="${pub.dir}/${policies.dir}"
  />

  <deleterc
    firstarea = "${firstarea}"
    firstdocumentid="${node.firstdocumentid}"
    secarea="${secarea}"
    secdocumentid="${node.newdocumentid}"
    rcmldir="${rcml.dir}"
    rcbakdir="${rcbak.dir}"
    srcareadir="${firstarea.dir}"
  />
</target>

  <target name = "rewrite-links">

    <taskdef name="linkRewrite" classname="org.apache.lenya.cms.ant.LinkRewriteTask"/>
    
    <linkRewrite baseDir="${pub.dir}/${authoring.dir}"
      stylesheet="${pub.dir}/../../xslt/util/linkRewrite.xsl"
      area="${authoring.area}"
      oldDocumentId="${node.firstdocumentid}"
      newDocumentId="${node.newdocumentid}"/>
    
  </target>
  

<target name = "moveDocument" depends="firstareaproperties,
    secareaproperties, newcopydocumentid, firstdocumentpath,
    secdocumentpath, move, rewrite-links">
  <echo>moveDocument</echo> 
</target>

<target name = "setIdentifier">
  <taskdef name="setidentifier" classname="org.apache.lenya.cms.ant.SetIdentifier"/>
  <setidentifier
    area="${firstarea}"
    documentid="${node.firstdocumentid}"
  />
</target>

<target name = "archiveDocument" depends="firstareaproperties,
  secareaproperties, newarchivedocumentid, firstdocumentpath,
  secdocumentpath, setIdentifier, move"> 
  <echo>archiveDocument</echo> 
</target>

<target name = "deleteDocument" depends="firstareaproperties,
  secareaproperties, newarchivedocumentid, firstdocumentpath,
  secdocumentpath, setIdentifier, move"> 
  <echo>deleteDocument</echo> 
</target>

<target name = "restoreDocument" depends="firstareaproperties,
  secareaproperties, newcopydocumentid, firstdocumentpath,
  secdocumentpath, move"> 
  <echo>restore Document</echo> 
</target>

<target name = "deleteTrash">
  <echo>delete the trash</echo> 
  <!-- To do workflow --> 
  <delete includeEmptyDirs="true">
    <fileset dir="${pub.dir}/">
      <include name="**/${trash.dir}/**"/>
      <exclude name="**/${trash.dir}/${sitetree}"/>
      <exclude name="**/${trash.dir}"/>
      <include name="**/${trash.resource.dir}/**"/>
      <exclude name="**/${trash.resource.dir}"/>
      <include name="**/${wf.history.trash.dir}/**"/>
      <exclude name="**/${wf.history.trash.dir}"/>
    </fileset>
  </delete>

  <taskdef name="resetsitetree" classname="org.apache.lenya.cms.ant.SiteTreeResetTask"/>
  <resetsitetree
    area="${trash.area}"
  />

</target>


  <target name="deletecache">
    <delete dir="${cachedir}"/>
  </target>

</project>
