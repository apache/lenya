<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 1999-2004 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!-- $Id: authorizers.xml,v 1.4 2004/03/16 12:59:48 gregor Exp $ -->

<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.1//EN" "document-v11.dtd">

<document>
	<header>
		<title>Authorizers</title>
		<version/>
		<type/>
		<authors>
			<person name="Andreas Hartmann" email="andreas@apache.org"/>
		</authors>
	</header>

  <body>
	
<section>
	<title>Introduction</title>
	<p>An <em>Authorizer</em> checks if an <em>Identity</em> is authorized
	to invoke a certain request.
	</p>
	
	<p>
	The <em>DelegatingAuthorizerAction</em> tries to
	resolve an <em>AccessController</em> for the URL. If an <em>AccessController</em>
	could be resolved, its <code>authorize(Request)</code> method is used to authorize the request.
	If no <code>AccessController</code> could be found, the access to the request
	is granted for free.</p>
	
	<p>
	  The <em>DefaultAccessController</em> delegates the authorization to its
	  <em>Authorizer</em>s. Only when all <em>Authorizer</em>s return <code>true</code>,
	  the request is authorized.
	</p>
</section>
	
	<section>
		<title>PolicyAuthorizer</title>
		<p>A <em>PolicyAuthorizer</em> uses <em>Policies</em> for authorizing. It returns <code>true</code>,
		when the current <em>Identity</em> has at least one <em>Role</em> for the requested URL.</p>
	</section>
	
	<section>
		<title>UsecaseAuthorizer</title>
		<p>This <em>Authorizer</em> looks for the <code>lenya.usecase</code> request
			parameter and checks the usecase policy file for the <em>Role</em>s that are
			allowed to execute this usecase. The location of this file is defined
			using the <code>configuration</code> parameter which points to a URL:</p>
		<source><![CDATA[<authorizer type="usecase">
  <parameter name="configuration"
      value="context:///lenya/pubs/mypub/config/ac/usecase-policies.xml"/>
</authorizer>]]></source>

		<p>The usecase policy file might look as follows:</p>
		
		<source><![CDATA[<?xml version="1.0"?>
<usecases xmlns="http://apache.org/cocoon/lenya/ac/1.0">
  <usecase id="create">
    <role id="editor"/>
  </usecase>
  <usecase id="rename">
    <role id="editor"/>
  </usecase>
</usecases>]]></source>
	</section>
	
	<section>
		<title>WorkflowAuthorizer</title>
		<p>The <em>WorkflowAuthorizer</em> is responsible for protecting workflow
			transitions. Therefore it</p>
		<ul>
			<li>looks for the <code>lenya.event</code> request parameter,</li>
			<li>determines the current state of the workflow instance, and</li>
			<li>checks if the event may be invoked by one of the current <em>Role</em>s in this
				state.</li>
		</ul>
		
		<p>The <em>WorkflowAuthorizer</em> has no configuration options:</p>
		
		<source><![CDATA[<authorizer type="workflow"/>]]></source>
	</section>
	
  </body>
</document>
