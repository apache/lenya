<html>
<head>
<title>Computerworld.ch: Dossier</title>
<meta name="keywords" lang="de"
content="computerworld, computerworld.ch, computer, world, zeitung, it, magazin, special, " />
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css"
href="../../css/default.css" />
<meta name="rights" content="copyright by computerworld.ch" />
<meta http-equiv="Content-Language" content="de-ch" />
<meta name="description"
content="Die Schweizer Website f&#252;r Informatik Technologie und Internet" />
<meta name="robots" content="index,follow" />
<meta name="copyright" content="computerworld.ch" />
<meta name="language" content="de-ch" />
</head>
<body bgcolor="#FFFFFF">
<a id="" name=""></a> 

<table>
<tr><!-- OBENSTEHENDES NICHT MITKOPIEREN -->
<!-- DOSSIER TABLE BEGINS HERE -->
<td width="440" valign="top">
<!-- MOEGLICHER ORT FUER RECTANGLE BANNER -->
<table border="0" cellpadding="0" cellspacing="0" width="440">
<tr>
<td width="440" height="5" colspan="2"><img
src="../../img/layout/trans1x1.gif" width="1" height="5" /></td>
</tr>

<tr>
<td valign="top" height="30"><span class="txt-xl-black">Visual
Basic wird erwachsen</span></td>
</tr>

<tr>
<td valign="top"><span class="txt-m-black"><i>Mit dem Umstieg von
Visual Basic 6 auf Visual Basic Dotnet ist bei den
Microsoft-Entwicklern Umdenken angesagt. Er bedeutet das Ende
vieler alter Gewohnheiten.</i></span></td>
</tr>

<tr>
<td valign="top"><span class="txt-s-black"><br />
<b>Erscheinungsdatum:</b> 22.11.2002<br />
 <b>Rubrik:</b> Technologie &amp; Service<br />
 <b>Autor:&#160;</b> <a href="../../impressum/"
class="txt-link-red">Wolfgang B&#246;hler</a><br />
<br />
</span></td>
</tr>

<tr>
<td valign="top"><span class="txt-m-black">Vom kommerziellen
Standpunkt aus gesehen ist Visual Basic vermutlich die bedeutendste
Programmiersprache &#252;berhaupt, auf jeden Fall mit dem
sp&#252;rbarsten Einfluss in der Welt der Unternehmensinformatik.
Und dies nicht, weil sie tiefgreifende Einsichten in die
fundamentalen Probleme der Datenverarbeitung erlauben w&#252;rde.
Eher im Gegenteil: Weil Visual Basic das Programmieren f&#252;r
eine Unmenge Interessierter - darunter auch zahlreiche
Quereinsteiger - zu einer zug&#228;nglichen T&#228;tigkeit gemacht
hat. Mit Visual Basic hat das Programmieren definitiv das
akademisch-elit&#228;re Umfeld verlassen. Der Softwaregigant
Microsoft hat kr&#228;ftig dazu beigetragen, die Produktionsmittel
der Datenverarbeitung zu demokratisieren.<br />
<br />
 Die Sprache ist in den letzten Jahren st&#228;ndig
weiterentwickelt worden. Ins Leben gerufen wurde sie 1991. Schon
mit der Version 3 ist die entscheidende Technik des DAO (Data
Access Object) eingef&#252;hrt worden, die einen komfortablen
Umgang mit Datenbanken erm&#246;glicht. Die Version 4 hat
daf&#252;r mit einem auch f&#252;r andere Microsoft-Produkte
typischen Problem gek&#228;mpft: Das gewaltig wachsende historische
Inventar an Microsoft-Techniken mit einer zukunftsgerichteten
Strategie unter einen Hut zu bringen. Die Folge: Die Entwickler
hatten die Wahl zwischen zwei Compilern, einer 16-Bit- und einer
32-Bit-Fassung - oder mussten f&#252;r beide eine eigene Version
pflegen.<br />
<br />
 <b>Erste Komponenten</b><br />
 Mit dieser fr&#252;hen Visual-Basic-Fassung haben die Redmonder
aber auch so etwas wie einen historischen S&#252;ndenfall begangen
(f&#252;r den Microsoft r&#252;ckblickend den unzimperlichen
Ausdruck "H&#246;lle" benutzt): Fortan ist es m&#246;glich, die
ber&#252;hmt-ber&#252;chtigten Dynamic Link Libraries (DLL) auch in
Visual Basic zu schreiben, welche die bedeutendste Quelle von
Kompatibilit&#228;tsproblemen zwischen Windows-Programmen sind.
Erst jetzt, mit Visual Basic Dotnet, glaubt Microsoft, das Problem
wirklich in den Griff zu bekommen. Visual Basic 5 hat auch das
Schreiben von Active-X-Steuerelementen erm&#246;glicht, nachdem die
Version 4 schon das Component Object Model (COM)
unterst&#252;tzte.<br />
<br />
 Visual Basic 6 ist nun schon seit 1998 verf&#252;gbar. Es hat die
Sprache um Websteuerelemente und die Schnittstellenvererbung
f&#252;r Klassen erweitert. Letzteres hat es im Prinzip
m&#246;glich gemacht, sich beim Programmieren an die Konzepte der
objektorientierten Programmierung anzulehnen. Tats&#228;chlich
bevorzugen aber viele altgediente Visual-Basic-Entwickler (laut
Studien mehr als 50 Prozent) nach wie vor ihren vertrauten
prozeduralen Ansatz. Der Umstieg auf Visual Basic Dotnet wird ihnen
zwar schwerer fallen als der j&#252;ngeren Generation. Die
konsequente Objektorientiertheit des neuen Dialektes wird ihnen bei
ihrer Umstellung aber sicherlich auch entgegenkommen.<br />
<br />
 <b>Es lebe das Objekt</b><br />
 Visual Basic Dotnet ist mit dem Wechsel vom traditionellen
prozeduralen zum objektorientierten Modell eine komplett neue Form
der Softwareentwicklung. Dies behauptet nicht bloss die
konkurrierende Java-Fraktion. Sie m&#246;chte den
Microsoft-Anh&#228;ngern gerne den Umstieg auf Java schmackhaft
machen und wird deshalb nicht m&#252;de zu wiederholen, dass der
Umstieg von Visual Basic 6 auf Visual Basic Dotnet etwa so
aufwendig werden d&#252;rfte wie derjenige vom klassischen Visual
Basic auf Java. Diese Einsicht stammt von John Connell, der in der
Microsoft Press das massgebliche Buch zu der Programmiersprache
ver&#246;ffentlicht hat (John Connell: Visual Basic Dotnet
verstehen und anwenden - Programmiertechniken f&#252;r Visual Basic
.NET, Microsoft Press 2002). Er zitiert als Kronzeugen Bill Gates,
der den Wechsel von Visual Basic 6 auf Visual Basic .NET sogar als
dramatischer einstuft als denjenigen von DOS auf Windows.<br />
<br />
 Im Grunde genommen muss der bis anhin verw&#246;hnte Programmierer
mit Visual Basic Dotnet eine alte Rechnung begleichen. Die
Einfacheit der Benutzung von Visual Basic hat n&#228;mlich ihren
Preis: Zwar wird die Komplexit&#228;t den Benutzern der Sprache
nicht zugemutet. Um die Leistungsf&#228;higkeit des Konzeptes zu
wahren, muss sie trotzdem vorhanden sein: Der
Visual-Basic-Programmierer muss sich nicht mit den scheinbaren
Schwierigkeiten des grossen Bruders C++ herumschlagen, was aber
nicht heisst, dass er diese nicht nutzt. Die Schnittstelle zu
C++-Komponenten heisst COM und ist von Microsoft entwickelt worden,
um die sprach&#252;bergreifende Kommunikation sicherzustellen.
Damit kann Visual Basic auf Code zur&#252;ckgreifen, der in C++
verfasst ist - in Form von ocx-Dateien - und zahlreiche
Detailprobleme auf tieferer Systemebene l&#246;st.<br />
<br />
 COM hat auch Nachteile (John Conell r&#228;umt diese
freim&#252;tig ein): Mit der Technik ist es zum Beispiel schwierig,
Prozesse im entfernten Zugriff zu starten. Es ist deshalb um DCOM
(Distributed COM) erg&#228;nzt worden, das aber schwer zu
konfigurieren ist und bloss auf Windows-Plattformen l&#228;uft.
Zudem hat DCOM einen dem Zeitgeist widersprechenden,
schwerwiegenden Mangel: Zum Empfang von DCOM-Daten muss in einer
Firewall ein spezieller Port ge&#246;ffnet werden, was ein
potenzielles Sicherheitsrisiko darstellt. Damit ist jetzt aber
Schluss: Mit Visual Basic kann DCOM in den verdienten Ruhestand
geschickt werden.<br />
<br />
 <b>Neue Verh&#228;ltnisse</b><br />
 Mit dem Dotnet-Etikett wird Visual Basic quasi als Vollmitglied in
die Familie der kommerziellen Programmiersprachen aufgenommen. Wie
die anderen Mitglieder, allen voran C++, C Sharp oder Cobol setzt
es auf das Herzst&#252;ck des Dotnet-Frameworks auf: der Common
Language Runtime. Visual Basic wird wie alle anderen Sprachen von
einem Compiler &#252;bersetzt, der wiederum auf einer sogenannten
Common Language Specification (CLS) aufsetzt. Sie sorgt f&#252;r
die Interoperabilit&#228;t zwischen den Sprachen.<br />
<br />
 Die Verleihung der "Vollmitgliedschaft" in der Sprachengilde hat
aber eben auch ihren Preis: Visual Basic kennt nun alle die
variablen und benutzerdefinierten Typen, Arrays, Klassen,
grafischen Formulare, optischen Steuerelemente und Schnittstellen
der anderen Sprachen. Wer also Visual Basic als Werkzeug
w&#228;hlt, weil er die Komplexit&#228;t und Differenziertheit von
C++ und anderen Gegenst&#252;cken scheut, dem k&#246;nnte ein
unsanftes Erwachen bevorstehen. Um es auf den Punkt zu
bringen:<br />
<br />
 Die Einarbeitung in Visual Basic bedeutet erheblich mehr Aufwand
als diejenige in fr&#252;here Versionen. Die Konzepte der
objektorientierten Programmierung m&#252;ssen wirklich verstanden
werden. Die mittlerweile grosse didaktische Erfahrung der Redmonder
macht es aber einem motivierten Einstieger m&#246;glich, diesen
Initialaufwand zu bew&#228;ltigen. Der zuk&#252;nftige
Visual-Basic-Progammierer verf&#252;gt damit &#252;ber ein nicht zu
untersch&#228;tzendes Mehr an Kompetenz. Er kann dank der
gestiegenen konzeptuellen Kompetenz viel einfacher von der
Einsteigersprache auf C Sharp oder Visual C++ umsteigen als sein
Vorg&#228;nger. Er kann aber auch - was man in Redmond eben etwas
weniger gern h&#246;rt - einfacher auf Java umsteigen.<br />
<br />
 Diese Perspektive sollten den klassischen
Visual-Basic-Programmierern helfen, den ersten Schreck zu
&#252;berwinden. Der packt ihn n&#228;mlich garantiert, sobald er
einen ersten Blick auf den Visual-Basic-Dotnet-Code wirft: Statt
der lapidaren Zweizeilen-Definition einer Prozedur sieht er sich
mit gut drei Dutzend Codezeilen konfrontiert. Sie verlangen ihm
eben die Handarbeit ab, welche ein C++-Programmierer schon immer
leisten musste. Es ist, als ob die Visual-Basic-Erfinder den
Schleier gel&#252;ftet h&#228;tten, der bislang &#252;ber den
tiefer liegenden Schnittstellen lag. Das Getriebe des Systems liegt
nun offen da; es gilt, den virtuellen Schraubenschl&#252;ssel zu
z&#252;cken und mit der Feinarbeit zu beginnen.<br />
<br />
</span> </td>
</tr>
</table>

<!-- DOSSIER TABLE ENDS HERE -->
</td>
<!-- CONTENT TABLE ENDS HERE -->
<!-- UNTENSTEHENDES NICHT MITKOPIEREN -->
</tr>
</table>
</body>
</html>

