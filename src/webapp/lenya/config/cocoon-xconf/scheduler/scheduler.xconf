<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

  <!--
  The scheduler has to be added after the HSQLDB server to ensure that the datasources are available.
  -->

  <xconf xpath="/cocoon"
    remove="/cocoon/component[@role = 'org.apache.cocoon.components.cron.JobScheduler']"
    insert-after="/cocoon/hsqldb-server"
    unless="/cocoon/component[@role = 'org.apache.cocoon.components.cron.JobScheduler'][store/datasource = 'LenyaScheduler']"
    if-prop="patch.webapp">
    
    <component class="org.apache.cocoon.components.cron.CocoonQuartzJobScheduler" logger="cron" role="org.apache.cocoon.components.cron.JobScheduler">
      <!--+
        | Definitions for a thread pool used to schedule jobs
        +-->
      <thread-pool>
        <!--+
          | Should we queue up execution requests if the pool is busy?
          | Defaults to false
          +-->
        <use-queueing>false</use-queueing>
        
        <!--+
          | How big should the queue be.
          | Defaults to unlimited size (<0 == default)
          +-->
        <queue-size>-1</queue-size>
        
        <!--+
          | The maximum size of the pool.
          | Defaults to Integer.MAX_VALUE (<0 == default)
          +-->
        <max-pool-size>-1</max-pool-size>
        
        <!--+
          | The minimum size of the pool.
          | Defaults to 1 (<0 == default)
          +-->
        <min-pool-size>1</min-pool-size>
        
        <!--+
          | How long will an idle thread be kept before it will be discarded.
          | Defaults to 60000ms (<0 == default)
          +-->
        <keep-alive-time-ms>60000</keep-alive-time-ms>
        
        <!--+
          | Which blocking policy should be used if the maximum pool
          | size and queue size is bounded:
          | Run:           (default) The thread making the execute
          |                request runs the task itself. This policy
          |                helps guard against lockup.
          | Wait:          Wait until a thread becomes available.
          | Abort:         Throw a RuntimeException
          | Discard:       Throw away the current request and return.
          | DiscardOldest: Throw away the oldest request and return.
          +-->
        <block-policy>RUN</block-policy>
        
        <!--+
          | Should queued and running jobs be given a chance to finished
          | on system shutdown. Defaults to true
          +-->
        <shutdown-graceful>true</shutdown-graceful>
        
        <!--+
          | The maximum time to wait for running jobs to complete.
          | Defaults to unlimited time (<0 == default)
          +-->
        <shutdown-wait-time-ms>5000</shutdown-wait-time-ms>
      </thread-pool>
      
      <triggers/>
      
      <!--+
        | Definition of the JobStore.
        | Store type can be one of "ram" (default), "tx", or "cmt".
        |
        | "tx" and "cmt" stores require datasource configuration.
        | (Attributes delegate and provider are optional)
        +-->
      <store delegate="org.quartz.impl.jdbcjobstore.StdJDBCDelegate" type="tx">
        <datasource provider="excalibur">LenyaScheduler</datasource>
      </store>
      
    </component>
  </xconf>
