<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 1999-2004 The Apache Software Foundation
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!-- $Id: index.xml 55543 2004-10-26 00:14:59Z gregor $ -->

<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">

<document>
  <header>
    <title>Best Practises when Developing with Lenya 2.0</title>
  </header>
  <body>
    <section>
      <title>Speeding Up Development</title>
      <p>
        Following these tips can increase your development productivity:
      </p>
      <ul>
        <li>
          Set up your development environment correctly. The time you invest in this will
          pay off very quickly.
        </li>
        <li>
          Practise <a href="http://en.wikipedia.org/wiki/Test_driven_development">test-driven
          development</a>. Since you can execute the tests with a single click in Eclipse,
          you don't need to build and restart the application to check if something works.
        </li>
        <li>
          During development, set <code>modules.copy=false</code> in <code>local.build.properties</code>.
          This way, you don't have to execute the build process when you change something in a module
          (except Java files and patches for <code>cocoon.xconf</code>).
        </li>
        <li>
          Put all your non-Java files - XSLTs, CSS files, JX templates and complex sitemaps - in modules.
          This allows you to change them without rebuilding (see preceding tip).
          Using modules for anything which is not specific for a publication is a
          good practise anyway - it encourages generic design and reuse.
        </li>
      </ul>
    </section>
    <section>
      <title>Building Maintainable Applications</title>
      <p>
        To ensure the simplicity and maintainability of your Lenya-based applications,
        try the following tips:
      </p>
      <ul>
        <li>
          Use resource types sparingly. A new resource type adds complexity to your
          application. It requires to patch <code>cocoon.xconf</code> and is therefore
          a static element of your application. Most differences between pages can be
          implemented by using different XSLTs or templates in the presentation layer,
          or even using distinct samples to provide a starting point for a certain type of
          page.
        </li>
        <li>
          Make extensive use of resource type formats. This way, you create orthogonality -
          if you implement a certain format in each of your resource types, it is very
          easy to include arbitrary resources in different locations. Typical examples
          of formats are print views, teasers, summaries, icons, and RSS feeds.
        </li>
        <li>
          Modularize your application. You can put each resource type in a separate
          module. Service implementations are good module candidates as well - by
          adding or removing them from your build path you can easily switch between
          several implementions. A complex application is likely to feature a
          <code>shared</code> module which contains utility XSLTs and other resources
          which are used across multiple modules.
        </li>
        <li>
          Use templates instead of XSLTs for layout purposes. This is an example of the
          <a href="http://en.wikipedia.org/wiki/Separation_of_concerns">Separation of Concerns</a>
          paradigm. XHTML templates can be edited without XSLT skills and without influencing
          your presentation logic. For more information, check out the article
          <a href="http://www.cocooncenter.org/articles/stylefree.html">Style-free Stylesheets with Cocoon</a>
          on cocooncenter.org.
        </li>
        <li>
          Keep your sitemaps simple. It is very hard to write tests for sitemaps, and complex ones
          are difficult to read. Instead of building huge nested pipelines (e.g. for error handling),
          it often makes sense to implement a specific selector or action to handle the
          complicated aspects of the page flow. As soon as the functionality is implemented
          in Java, it can be tested using unit tests and refactored using your favorite IDE.
        </li>
        <li>
          Don't overload your usecase handler classes with view-specific details. The handler
          is occupied with business logic, it shouldn't have to deal with the view as well.
          If the JX templates become too complex, consider writing utility classes and
          call them from the template. Modularizing JX templates is another promising approach
          to reduce their complexity.
        </li>
      </ul>
    </section>
  </body>
</document>
