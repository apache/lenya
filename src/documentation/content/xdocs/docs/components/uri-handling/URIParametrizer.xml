<?xml version="1.0"?>
<!--
  Copyright 1999-2004 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!-- $Id$ -->

<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.1//EN" "document-v11.dtd">
<document> 
  <header> 
    <title>URI Parametrizer</title>
    <version major="0" minor="1">Initial version</version>
    <authors>
      <person name="Lenya community" email="lenya-dev@cocoon.apache.org"/>
    </authors> 
    <notice></notice> 
    <abstract>Desciption of the URI Parametrizer which is a key
    element of the site tree framework.</abstract>
  </header> 
  <body> 

    <section>
      <title>Motivation</title>

      <p>The problem of <link
      href="../publication/siteTree.html">determining the doctype</link>
      independent of request URI needs a flexible and yet simple
      solution. This is where the URI Parametrizer comes to the
      rescue.</p>

    </section>

    <section>
      <title>Rationale</title>

      <p>The URI Parametrizer is an action which given an arbitrary
      URI return a configurable number of parameters which it infers
      from this URI. Typical parameters include source document type,
      navigation location, etc. The action itself delegates to task of
      determining the parameters to the Cocoon sitemap, i.e. the
      parameters are determinined using the normal sitemap pipeline
      matching mechanism.</p>

      <section>
	<title>Overview</title>
	
	<p>The flow of information is outlined in the following
	diagram:</p>

	<figure src="images/live/URIParametrizer.png" alt="Diagram of URIParametrizer"/>

      </section>
      <section>
	<title>Interfaces</title>

	<p>The URIParametrizerAction expects an arbitrary number of
	parameters. Each parameter contains a key value pair which
	denotes the name of the parameter and the source. A typical
	example is as follows:</p>
	<source><![CDATA[
<map:act type="uriparametrizer">
  <map:parameter name="doctype"
	  value="cocoon://uri-parameter/{publication-id}/doctype"/>
  <map:parameter name="path"
	  value="cocoon://uri-parameter/{publication-id}/path"/>
  <map:generate src="cocoon:/{doctype}/{path}"/>
</map:act>
]]></source>

	<p>The <code>uri-parameter</code> prefix is a standard prefix
	which invokes a pipeline in the root sitemap which mounts a
	subsitemap in your publication with the name
	<code>parameter-{parameterName}.xmap</code>.</p> 

	<p>The action basically just issues a request back to cocoon
	for each parameter. It uses the URI given in the value
	attribute where it also adds the original request URI. So for
	a given request URI <code>foo.html</code> and the parameters
	given above the action basically issues to requests using the
	<code>cocoon:</code> protocol:</p>
	<source>
cocoon://uri-parameter/{publication-id}/doctype/foo.html
cocoon://uri-parameter/{publication-id}/path/foo.html</source>

	<p>The matcher for uri-parameter in the root sitemap then
	tries to mount the sitemaps
	<code>parameter-doctype.xmap</code> and
	<code>parameter-path.xmap</code> in the publication. Then the
	reuest is matched against the parameter sitemap. Here's a very
	simple example of a parameter sitemap:</p>

	<source><![CDATA[
<?xml version="1.0"?>

<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">

  <map:components>
    <map:generators default="file"/>
    <map:transformers default="xslt"/>
    <map:readers default="resource"/>
    <map:serializers default="html"/>
    <map:matchers default="wildcard"/>
    <map:actions/>
  </map:components>

  <map:views/>

  <map:resources/>

  <map:pipelines>

    <map:pipeline>
      
      <map:match pattern="**">
	<map:generate type="serverpages" src="content/parameters/doctype.xsp">
          <map:parameter name="value" value="{1}"/>
        </map:generate>
	<map:serialize type="xml"/>
      </map:match>
      
    </map:pipeline>

  </map:pipelines>
</map:sitemap>]]></source>

	<p>A more serious example could possibly include matchers
	using the SourceTypeAction from the Forrest Project or a
	HashMapAction as outlined in the <link
	href="../publication/siteTree.html">SiteTree proposal</link>.</p>

	<p>After a match has been found the pipeline in the parameter
	sitemap returns an XML snippet in the following form:</p>

	<source><![CDATA[
<?xml version="1.0" encoding="ISO-8859-1"?>

<parameter xmlns="http://apache.org/cocoon/lenya/uri-parameters/1.0">article</parameter>
]]></source>

	<p>This xml is consequently parsed by the action and returned
	as a HashMap. Inside the action the parameters will be
	available under the names as they were specified in the
	parameters to the action.</p>
      </section>

      <p>The fact that the actual determination is delegated back to
      the sitemap allows for a combination of the <link
      href="../publication/siteTree.html">original proposals</link> where
      solutions such as Hashmap and SourceTypeAction were
      outlined.</p>
    </section>

  </body> 
  <footer> 
    <legal>Â© 2003 wyona.org</legal> 
  </footer>
</document>
