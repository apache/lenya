<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 1999-2006 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!-- $Id: metadata.xml 55543 2004-10-26 00:14:59Z gregor $ -->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" 
  "http://forrest.apache.org/dtd/document-v20.dtd">
<document>
  <header>
    <title>Meta Data</title>
  </header>
  <body>
    <section>
      <title>Introduction</title>
      <p>
        Meta data are organized in <em>element sets</em>.
        An element set is identified using a namespace URI.
        Each element set can supply a fixed set of elements.
        An element is identified using a name. An element can
        be <em>editable</em>, and it can support <em>multiple values</em>.
      </p>
    </section>
    
    <section>
      <title>Registering Meta Data Element Sets</title>
      <p>Element sets are declared using patch files for <code>cocoon.xconf</code>.
      When the application starts up, they are registered with the <code>MetaDataRegistry</code>.
      Here's an example:</p>
<source xml:space="preserve"><![CDATA[<xconf xpath="/cocoon/meta-data"
    unless="/cocoon/meta-data/component-instance
      [@name = 'http://apache.org/lenya/metadata/media/1.0']">
  <component-instance name="http://apache.org/lenya/metadata/media/1.0"
    class="org.apache.lenya.cms.metadata.ConfigurableElementSet">
    <element name="filename" multiple="false"/>
    <element name="format" multiple="false"/>
    <element name="extent" multiple="false"/>
    <element name="width" multiple="false"/>
    <element name="height" multiple="false"/>
    <element name="caption" multiple="false" editable="true"/>
  </component-instance>
</xconf>]]></source>
    </section>
    
    <section>
      <title>Accessing Meta Data</title>
      <p>Here's an example for accessing the meta data of a document:</p>
      <source xml:space="preserve"><![CDATA[
MetaData meta = document.getMetaData("http://myproject.org/metadata/1.0");
String description = meta.getFirstValue("description");
String[] references = meta.getValues("references");
]]></source>
      <p>To find out which element sets are registered, you can access
      the <code>MetaDataRegistry</code>:</p>
      <source xml:space="preserve"><![CDATA[
MetaDataRegistry registry = null;
try {
    registry = (MetaDataRegistry) this.manager.lookup(MetaDataRegistry.ROLE);
    String[] namespaces = registry.getNamespaceUris();
    ...
}
finally {
    if (registry != null) {
        this.manager.release(registry);
    }
}      
]]></source>
    </section>
    
    <section>
      <title>The Meta Data Input Module</title>
      <p>You can use the <code>MetaDataModule</code> to make an element set accessible
      in Cocoon sitemaps. To declare it, use a patch file for <code>cocoon.xconf</code>:</p>
      <source xml:space="preserve"><![CDATA[<xconf xpath="/cocoon/input-modules"
  unless="/cocoon/input-modules/component-instance[@name = 'mymeta']">
  <component-instance logger="sitemap.modules.input.mymeta" name="mymeta"
    class="org.apache.lenya.cms.cocoon.components.modules.input.MetaDataModule"
    namespace="http://myproject.org/metadata/1.0"/>
</xconf>]]></source>
      <p>Now you can access the meta data in your pipelines:</p>
      <source xml:space="preserve"><![CDATA[<map:transform src="...">
  <map:parameter name="description" value="{mymeta:description}"/>
</map:transform>]]></source>
    </section>
    
    <section>
      <title>Storage</title>
      <p>In 1.4.x meta data is stored separately from the document content but in the same 
        directory (index_{lang}.meta).
        A typical sample for a meta data XML document may be the following:
      </p>
      <source><![CDATA[<metadata xmlns="http://apache.org/lenya/metadata/1.0">
  <element-set namespace="http://apache.org/lenya/metadata/media/1.0">
    <element key="width">
      <value>300</value>
    </element>
    <element key="height">
      <value>374</value>
    </element>
    <element key="extent">
      <value>30291</value>
    </element>
    <element key="filename">
      <value>hello-world.jpg</value>
    </element>
    <element key="format">
      <value>image/jpeg</value>
    </element>
  </element-set>
  <element-set namespace="http://purl.org/dc/elements/1.1/">
    <element key="creator">
      <value>lenya</value>
    </element>
    <element key="title">
      <value>Hello World</value>
    </element>
    <element key="date">
      <value>2006-07-20 22:44:37</value>
    </element>
    <element key="language">
      <value>en</value>
    </element>
  </element-set>
  <element-set namespace="http://apache.org/lenya/metadata/document/1.0">
    <element key="extension">
      <value>jpg</value>
    </element>
    <element key="resourceType">
      <value>resource</value>
    </element>
    <element key="contentType">
      <value>xml</value>
    </element>
  </element-set>
</metadata>
]]> </source>
    </section>
    <section>
      <title>Implementation</title>
      <p>Like nearly all new modules/functionality the meta data usecases are 
        following the new <strong>fallback</strong> concept. Meaning you are 
        using the core contracts as long you are <strong>not</strong> overriding them with 
        your own implementation. To override a core implementation you just 
        need to place your custom implementation to the right path in you pub 
        and lenya will try to pick it up from there.</p>
      <section>
        <title>Create meta data</title>
        <p>Upon creation of a document a set of sample meta data is presented 
          in the creation form. This values are partially filled in by the user 
          (subject, desciption, etc.) and partly by the system (creator, 
          creation data). This is done with the <code>site.create</code> 
          usecase (lenya.usecase=site.create).</p>
        <p> To tell lenya that you want as 
          well create a set of custom meta data, you need to extend the
          usecase handler and modify your 
          implementation of the <code>create.jx</code> form.</p>
        <note label="Custom implementation of create.jx"> An 
          <strong>example</strong> of an implementation can be found in 
          <code>{$default-pub}/lenya/usecases/site/create.jx</code>. Just 
          change it and see what comes out. BTW if you need it in your custom 
          pub just mind the path. ;-)</note>
      </section>
      <section>
        <title>Display/modify meta data</title>
        <p>The display of meta data is handled by the usecase 
          <code>tab.meta</code>. All editable meta data are presented by the form.</p>
      </section>
    </section>
  </body>
</document>