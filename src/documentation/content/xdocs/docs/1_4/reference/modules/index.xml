<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2002-2004 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document> 
  <header> 
    <title>Modules</title> 
  </header>
  <body>
    
    <section>
      <title>Introduction</title>
      <p>
        Modules are packages providing a certain set of resources or functionality.
      </p>
      <p>Examples:</p>
      <ul>
        <li>a resource type (e.g., docbook module)</li>
        <li>a repository implementation (e.g., jdbc module)</li>
        <li>a collection of XSLTs (e.g., content2svg module)</li>
      </ul>
      <p>
        Some modules are included in the Lenya distribution:
      </p>
      <ul>
        <li><strong>lucene</strong> - search functionality</li>
        <li><strong>sitetree</strong> - manage documents in a tree-like structure</li>
        <li><strong>jcr</strong> - store content in a <a href="http://www.jcp.org/en/jsr/detail?id=170">JCR</a> repository (experimental)</li>
        <li><strong>xhtml</strong> - XHTML-based resource type</li>
        <li><strong>links</strong> - resource type to manage link lists</li>
        <li><strong>lenyadoc</strong> - adds the <code>lenyadoc://</code> protocol</li>
      </ul>
    </section>

    <section>
      <title>Implementing a module</title>
      
      <p>
        All resources of a module are located in a single directory.
        The following is an example directory structure, all files are optional
        and depend on the nature of the module.
      </p>
    
<source xml:space="preserve">
mymodule/
  config/                    configuration files
    module.xml               module descriptor
    cocoon-xconf/            patches for cocoon.xconf
      components.xconf     
  usecases/
    mymodule.jx              usecase view
  resources/
    images/                  image files
    css/                     CSS files
    schemas/                 XML schemas (RNG, XSD, ...)
    samples/                 Samples (in case of resource type modules)
  java/
    src/                     Java source files
    test/                    Java test classes
    lib/                     Java libraries
  xslt/                      XSLT stylesheets
  sitemap.xmap               main module sitemap
</source>

      <p>To add a module to your Lenya installation, declare it in <code>local.build.properties</code>:</p>

<source xml:space="preserve">
modules.root.dirs=src/modules:src/webapp/lenya/pubs/default/modules:/home/john/modules/mymodule
</source>      
      <p>
        When the module is deployed, the following steps are executed:
      </p>
      <ul>
        <li>the module files are copied to <code>context://lenya/modules</code></li>
        <li>Java sources are compiled, libraries are installed</li>
        <li><code>cocoon.xconf</code> is patched</li>
      </ul>

    </section>
    
    <section>
      <title>The Module Descriptor File</title>
      <p>
        Each module must be described using a <em>module descriptor</em> XML file
        <code>module.xml</code>, located in the <code>config</code> directory of the module.
        The descriptor is validated when the module is deployed, so be careful! :)
      </p>
      <p>
        A typical module descriptor looks like this:
      </p>
      <source xml:space="preserve"><![CDATA[<module xmlns="http://apache.org/lenya/module/1.0">
  <id>org.myproject.lenya.modules.myeditor</id>
  <depends module="org.apache.lenya.modules.usecase"/>
  <depends module="org.apache.lenya.modules.webdav"/>
  <export package="org.myproject.lenya.modules.myeditor.api"/>
  <package>org.myproject.lenya.modules</package>
  <version>0.1-dev</version>
  <name>My Own Editor</name>
  <lenya-version>2.0-dev</lenya-version>
  <description>
    This is my own editor.
    For more information, visit http://myproject.org/editor.
  </description>
</module>]]></source>
      <p>
        The <code>id</code> must start with the <code>package</code> of the module.
        It is not allowed to deploy two modules with the same ID.
      </p>
      <p>If your module uses code from other modules, you have to add 
       a <code><![CDATA[<depends>]]></code> for each of these modules.</p>
      <p>
        The <code><![CDATA[<export package="..."/>]]></code> statement(s) declare
        public packages, which means that these packages are accessible from other
        modules. You should aim for long-term stability of all interfaces and classes
        in exported packages, since they represent the Java API of your module.
      </p>
    </section>
    
    <section>
      <title>Implementing Usecases in Modules</title>
      
      <section>
        <title>Declaring the Usecase</title>
      
      <p>
        For example, imagine you implement a <code>newsletter</code> module, containing a <code>send</code> usecase.
        To declare usecases, add a patch file for <code>cocoon.xconf</code>, for instance <code>newsletter/config/cocoon-xconf/usecases.xconf</code>:
      </p>
<source xml:space="preserve"><![CDATA[<xconf xpath="/cocoon/usecases"
       unless="/cocoon/usecases/component-instance[@name = 'newsletter.send']">
  <component-instance name="newsletter.send"
                      logger="lenya.usecases.newsletter.send"
                      class="org.myproject.lenya.newsletter.usecases.Send">
    <view template="modules/newsletter/usecases/send.jx" menu="false"/>
  </component-instance>
</xconf>]]></source>

      <p>
        As you can see in the view declaration, the JX templates are typically stored in the <code>&lt;module&gt;/usecases</code>
        directory. The Java source files go into the <code>&lt;module&gt;/java/src</code> directory, they are compiled
        automatically by the Lenya build process.
      </p>
      
    </section>
    
    <section>
      <title>Calling the Module Sitemap</title>
      
      <p>
        The following URL syntax is used to make a call to a module sitemap:
      </p>
<source><![CDATA[cocoon://modules/<module>/**]]></source>
      
      <p>
        The module sitemap is located at <code>newsletter/sitemap.xmap</code>. To request
        the latest newsletter and display it on the confirmation screen using the CInclude approach
        (for more information, see documentation about the usecase framework), you could for instance use
        the URI <code>cocoon://modules/newsletter/latestNewsletter.xml</code>:
      </p>
      
<source xml:space="preserve"><![CDATA[<page:page
  xmlns:jx="http://apache.org/cocoon/templates/jx/1.0"
  xmlns:page="http://apache.org/cocoon/lenya/cms-page/1.0"
  xmlns="http://www.w3.org/1999/xhtml"
  xmlns:i18n="http://apache.org/cocoon/i18n/2.1"
  xmlns:cinclude="http://apache.org/cocoon/include/1.0"
  >
  
  <page:body>
    <h1><i18n:text>Send Newsletter</i18n:text></h1>
    <form>
      ...
      <jx:import uri="templates/messages.jx"/>
      
      <cinclude:includexml>
        <cinclude:src>cocoon://modules/newsletter/latestNewsletter.xml</cinclude:src>
      </cinclude:includexml>
      
      <input name="submit" type="submit" value="Send Newsletter"/>
    </form>
  </page:body>
</page:page>]]></source>

        <p>
        Another useful option is to use a module URL as the usecase view, e.g. to export some XML.
        Note that the attribute <code>uri</code> is used instead of <code>template</code>.
        The usecase class <code>DummyUsecase</code> can be used because no Java code shall be
        executed.
        </p>
      
        <source xml:space="preserve"><![CDATA[<xconf xpath="/cocoon/usecases"
       unless="/cocoon/usecases/component-instance[@name = 'newsletter.download']">
  <component-instance name="newsletter.send"
                      logger="lenya.usecases.newsletter.send"
                      class="org.apache.lenya.cms.usecase.DummyUsecase">
    <view uri="cocoon://modules/newsletter/downloadNewsletter.xml"/>
  </component-instance>
</xconf>]]></source>
      </section>
    
      <section>
        <title>Adding Menu Items</title>
      
      <p>
      A module can provide menu items which are added to the publication menu.
      To insert the menu items of a module, you have to add the module declaration to <code>publication.xconf</code>:
      </p>
      
<source xml:space="preserve"><![CDATA[<publication>
  ...
  <module name="newsletter"/>
  ...
</publication>]]></source>

      <p>
        If there is a <code>menus.xmap</code> sitemap in the module's root directory, a
        request of the form <code>&lt;area&gt;.xml</code> is sent into this sitemap.
        The matching pipeline could look like this:
      </p>
      
<source xml:space="preserve"><![CDATA[<map:match pattern="**">
  <map:generate type="serverpages" src="config/menu.xsp"/>
  <map:serialize type="xml"/>
</map:match>
]]></source>

      <p>
        The server page <code>&lt;module&gt;/config/menu.xsp</code> delivers a menu XML
        which includes the items to be inserted:
      </p>
      
<source xml:space="preserve"><![CDATA[<xsp:page ...>
  <menu>
    <menus>
      <menu i18n:attr="name" name="File">
        <block admin="false">
          <item uc:usecase="newsletter.send" href="?">
            <i18n:text>Send Newsletter</i18n:text>
          </item>
        </block>
      </menu>
    </menus>
  </menu>
</xsp:page>]]></source>
      
      
      </section>
    </section>
    
  </body>
</document>
