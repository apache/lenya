<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 1999-2006 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!-- $Id: metadata.xml 55543 2004-10-26 00:14:59Z gregor $ -->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" 
  "http://forrest.apache.org/dtd/document-v20.dtd">
<document>
  <header>
    <title>Running Lenya Behind Apache with mod_proxy</title>
  </header>
  <body>
    
    <section>
      <title>Introduction</title>

      <p>
        This tutorial aims at getting you started with a proxy environment.
        We're using Apache HTTPD 2.2 with the <em>mod_proxy</em> module. You'll find
        a lot of documentation on the web how to set up the web server on your
        machine.
      </p>
      <p>
        Our goal is to run two virtual servers on your local machine:
      </p>
      <ul>
        <li><em>cms.example.com</em> - the authoring environment of your publication</li>
        <li><em>www.example.com</em> - the actual live site</li>
      </ul>
      <p>
        Your administrators, editors etc. will use the URL <em>http://cms.example.com</em>
        to connect to the authoring environment. We'll require an SSL connection for the
        login usecase. Once you have established an SSL connection, your connection will
        stay encrypted.
      </p>
    </section>
    
    <section>
      <title>Declaring the Hosts</title>
      <p>
        To tell your system that the <em>example.com</em> domains run on your local machine,
        open your <code>hosts</code> file, usually located at <code>/etc/hosts</code>,
        and add the following lines:
      </p>
      <source xml:space="preserve"><![CDATA[127.0.0.1       cms.example.com
127.0.0.1       www.example.com]]></source>
    </section>
    
    <section>
      <title>Configuring the Apache Web Server</title>
      <p>
        Now we'll declare the virtual hosts for the Apache web server. This is done in
        a file called <code>httpd-vhosts.conf</code>. On Mac OS X, it is located in the directory
        <code>/opt/local/apache2/conf/extra</code>. If you're using Jetty on port 8888, the
        contents of the file should look like this:
      </p>
      <source xml:space="preserve"><![CDATA[NameVirtualHost *:80
NameVirtualHost *:443

# This is the non-SSL host for the authoring area.
<VirtualHost *:80>
    ServerAdmin webmaster@cms.example.com
    ServerName cms.example.com
    ServerAlias cms
    
    # Turn proxy requests off for security reasons
    ProxyRequests Off
    
    RewriteEngine On
    RewriteLog /home/john/src/www/logs/cms.example.com-rewrite_log
    RewriteLogLevel 4
    
    # First we match everything which is not mapped to /default/authoring
    RewriteRule ^/lenya/(.*) http://cms.example.com:8888/lenya/$1 [P,L]
    RewriteRule ^/modules/(.*) http://cms.example.com.com:8888/modules/$1 [P,L]
    RewriteRule ^/default/modules/(.*) http://cms.example.com:8888/default/modules/$1 [P,L]
    
    # Redirect the login usecase to https
    RewriteCond %{QUERY_STRING} (.*)lenya\.usecase=ac\.login(.*)
    RewriteRule ^/(.*) https://%{SERVER_NAME}/$1 [R,L]

    # Forward the authoring area to the proxy
    RewriteRule ^/(.*) http://cms.example.com:8888/default/authoring/$1 [P,L]
    ProxyPassReverse / http://cms.example.com:8888/default/authoring/
    
    ErrorLog /home/john/src/www/logs/cms.example.com-error_log
    CustomLog /home/john/src/www/logs/cms.example.com-access_log common
</VirtualHost>

# This is the SSL host for the authoring area.
<VirtualHost *:443>
    ServerAdmin webmaster@cms.example.com
    ServerName cms.example.com
    ServerAlias cms

    SSLEngine On
    SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL
    SSLCertificateFile /home/john/pki/server.crt
    SSLCertificateKeyFile /home/john/pki/server.key

    ProxyRequests Off
    RewriteEngine On
    RewriteLog /home/john/src/www/logs/cms.example.com-rewrite_log
    RewriteLogLevel 4

    RewriteRule ^/lenya/(.*) http://cms.example.com:8888/lenya/$1 [P,L]
    RewriteRule ^/modules/(.*) http://cms.example.com.com:8888/modules/$1 [P,L]
    RewriteRule ^/default/modules/(.*) http://cms.example.com:8888/default/modules/$1 [P,L]

    RewriteRule ^/(.*) http://cms.example.com:8888/default/authoring/$1 [P,L]
    ProxyPassReverse / http://cms.example.com:8888/default/authoring/
    
    ErrorLog /home/john/src/www/logs/cms.example.com-error_log
    CustomLog /home/john/src/www/logs/cms.example.com-access_log common
</VirtualHost>

# This is the non-SSL host for the live area.
<VirtualHost *:80>
    ServerAdmin webmaster@www.example.com
    ServerName www.example.com
    ServerAlias lenya
    
    ProxyRequests Off
    RewriteEngine On
    RewriteLog /Users/john/src/www/logs/www.example.com-rewrite_log
    RewriteLogLevel 4
    
    RewriteRule ^/([^/\.]+)$ $1/ [R]
    RewriteRule ^/(.*) http://www.example.com:8888/default/live/$1 [P,L]
    ProxyPassReverse / http://www.example.com:8888/default/live/
    
    ErrorLog /Users/john/src/www/logs/www.example.com-error_log
    CustomLog /Users/john/src/www/logs/www.example.com-access_log common
</VirtualHost>]]></source>

      <p>
        If you're using Tomcat on port 8080 with Lenya in the context path <em>lenya14</em>,
        you have to change the port and add the context path accordingly: 
      </p>
      <source xml:space="preserve"><![CDATA[    RewriteRule ^/(.*) http://cms.example.com:8080/lenya14/default/authoring/$1 [P,L]
    ProxyPassReverse / http://cms.example.com:8080/lenya14/default/authoring/]]></source>
      <note>
        You'll certainly run into cookie problems when using a non-empty context path
        (like <em>lenya14</em> in the example above) instead of running Lenya in the root context.
        This causes errors like "The session doesn't contain the identity.".
        You'll have to add some code to manipulate the cookies. If you need this functionality,
        please send a mail to the developers list or file an enhancement bug.
      </note>
      <note>
        With this setup, your browser might show error messages like "You have requested an
        encrypted page that contains some unencrypted information" when accessing a page
        with the <code>https</code> protocol. This is because Apache always connects to Lenya
        with the <code>http</code> protocol, so Lenya doesn't know that it should use <code>https</code>
        links to include images etc. on this page. This problem won't occur if you use the
        <a href="site:mod_proxy_ajp">mod_proxy_ajp</a> approach.
      </note>
      <p>
        The Apache web server can now be restarted using
      </p>
      <source xml:space="preserve">$ sudo apachectl restart</source>
    </section>
    
    <section>
      <title>Configuring the Publication for Proxying</title>
      <p>
        When you use a proxy, Lenya has to convert all internal links accordingly.
        Therefore you have to tell the publication about the proxy configuration.
        Open the file <code>pubs/default/config/publication.xml</code> and uncomment
        and modify the <code><![CDATA[<proxy/]]></code> elements:
      </p>
      <source xml:space="preserve"><![CDATA[<proxy ssl="false" area="authoring" url="http://cms.example.com"/>
<proxy ssl="false" area="live" url="http://www.example.com"/>
<proxy ssl="true" area="authoring" url="https://cms.example.com"/>
<proxy ssl="true" area="live" url="https://www.example.com"/>]]></source>
    </section>
    
    <section>
      <title>Configuring the Global Proxies</title>
      <p>
        The application-wide (publication independent) proxies are configured in
        <code>WEB-INF/cocoon.xconf</code>. Look for the declaration of the <code>GlobalProxies</code>
        service and update this entry:
      </p>
      <source xml:space="preserve"><![CDATA[<component logger="lenya.proxy"
    role="org.apache.lenya.cms.linking.GlobalProxies"
    class="org.apache.lenya.cms.linking.impl.GlobalProxiesImpl">
  <proxy ssl="false" url="http://cms.host.com"/>
  <proxy ssl="true" url="https://cms.host.com"/>
</component>]]></source>
    </section>
    
    <section>
      <title>Testing the Settings</title>
      <p>
        After re-deploying the publication and restarting your servlet container,
        you should be able to access the
        authoring environment of the default publication at the URL
        <a href="http://cms.example.com/">http://cms.example.com/</a>.
      </p>
    </section>
    
  </body>
</document>