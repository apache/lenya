<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2002-2004 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document>
  <header>
    <title>Setting up a Shibboleth Test Environment</title>
  </header>
  <body>

    <section>
      <title>Introduction</title>
      <p>"Shibboleth is standards-based, open source middleware software which provides Web Single
        SignOn (SSO) across or within organizational boundaries. It allows sites to make informed
        authorization decisions for individual access of protected online resources in a
        privacy-preserving manner." (quoted from the <a href="http://shibboleth.internet2.edu/"
          >Shibboleth website</a>)</p>
      <p>
        For more information about the integration of Shibboleth in Lenya, watch the
        <a href="http://www.slideshare.net/nobby/lenya-and-shibboleth">Single Sign-On with Lenya
        and Shibboleth</a> presentation on slideshare.
      </p>
    </section>
      
      <section>
        <title>Prerequisites</title>

        <p> The following sections describe how to set up a complete test environment including an
          <acronym title="Identity Provider">IdP</acronym> server with
          <acronym title="Central Authentication System">CAS</acronym> authentication and a
          <acronym title="Where are you from">WAYF</acronym> server in Apache Tomcat.
          We use Apache httpd as proxy server and for <acronym title="Secure Socket Layer">SSL</acronym>
          offloading.
          The installation might take a while, so grab the famous big mug of your favourite beverage
          and turn on some calming music.</p>
        
        <ul>
          <li>
            We install everything we need in a directory called <code>$SHIBTEST_HOME</code>, for
            instance at <code>/home/john/shibtest</code>.
          </li>
          <li>We assume that your <code>JAVA_HOME</code> environment variable is set.</li>
          <li> To simplify the following installation steps, export your <code>$SHIBTEST_HOME</code>
            as an environment variable:
              <source><![CDATA[$ export $SHIBTEST_HOME=/home/john/shibtest]]></source>
          </li>
          <li>
            As host names, we use
            <ul>
              <li>
                <code>idp.shibtest.org</code> for the identity provider,
              </li>
              <li>
                <code>sp.shibtest.org</code> for the service provider, i.e. the Lenya web
                application, and
              </li>
              <li>
                <code>wayf.shibtest.org</code> for the <acronym title="Where are you from">WAYF</acronym>
                server, i.e. the web application which lets you choose your identity provider
                (home organization).
              </li>
            </ul>
            Feel free to use these names, they are not related to the real websites (if they even exist).
          </li>
          <li>
            OpenSSL is required to generate the certificate.
          </li>
          <li>
            You'll probably need sudo permissions to add the key to the central Java keystore
            and to edit the <code>/etc/hosts</code> file.
          </li>
        </ul>
        <p>
          The following figure illustrates the setup:
        </p>
        <figure src="setup.png" alt="Setup"/>
      </section>
      <section>
        <title>Download and install Tomcat</title>
        <ul>
          <li>
            Get the latest Tomcat 5.5 distribution from the <a href="http://tomcat.apache.org"
            >Tomcat homepage</a>. When this documentation was written, this was 5.5.20.
            The setup should work with Tomcat 6.x as well.
          </li>
          <li> Extract <code>apache-tomcat-5.5.20.zip</code> in the directory
            <code>$SHIBTEST_HOME</code>. You end up with a directory
              <code>$SHIBTEST_HOME/apache-tomcat-5.5.20</code>. </li>
        </ul>
      </section>
    
    
      <section>
        <title>Download and install the Shibboleth identity provider</title>
        <ul>
          <li>
            You can get the Shibboleth identity provider sources from the <a
            href="http://shibboleth.internet2.edu/latest.html">Shibboleth download page</a>.
            Choose "Java Source with Ant-based Installer". When this documentation was written, the
            current version was 1.3.2. </li>
          <li>Extract the downloaded file <code>shibboleth-idp-1.3.2.tar.gz</code> in
              <code>$SHIBTEST_HOME</code>. You end up with a directory
              <code>$SHIBTEST_HOME/shibboleth-1.3.2-install</code>.</li>
          <li> In this directory, start the Shibboleth IdP installation by entering
              <source><![CDATA[$ cd $SHIBTEST_HOME/shibboleth-1.3.2-install
$ ./ant install]]></source>
            Be careful to execute <code>./ant</code> instead of <code>ant</code> so that
            the IdP's special version of Ant is used.
          </li>
          <li> You're asked several questions, which you answer as follows:
            <source xml:space="preserve"><![CDATA[Q: Do you want to install the Shibboleth Identity Provider? [Y,n]
A: Y

Q: What name do you want to use for the Identity Provider web application?
   [default: shibboleth-idp]
A: <Return> for default value

Q: Do you want to install it directly onto the filesystem or use the
   tomcat manager application?
A: 1

Q: Select a home directory for the Shibboleth Identity Provider
   [default: /usr/local/shibboleth-idp]
A: $SHIBTEST_HOME/shibboleth-idp

Q: Enter tomcat home directory [default: /usr/local/tomcat]
A: $SHIBTEST_HOME/apache-tomcat-5.5.20
]]></source>
          </li>
          <li> The installation process will create the Shibboleth IdP home directory at
              <code>$SHIBTEST_HOME/shibboleth-idp</code> and a web application archive at
              <code>$SHIBTEST_HOME/apache-tomcat-5.5.20/webapps/shibboleth-idp.war</code>. </li>
          <li>
            Now we can set the <code>IDP_HOME</code> environment variable which is
            used in later installation steps:
            <source xml:space="preserve"><![CDATA[$ export IDP_HOME=$SHIBTEST_HOME/shibboleth-idp]]></source>
          </li>
        </ul>
      </section>
    <section>
      <title>Configure the metadata file</title>
      <p>
        The metadata file contains information about our identity and service providers.
        Copy the file <code>$SHIBTEST_HOME/shibboleth-idp/etc/example-metadata.xml</code> to 
        <code>$SHIBTEST_HOME/shibboleth-idp/etc/metadata.xml</code>. In this file, you'll find
        two <code>EntityDescriptor</code> sections, one for the identity provider and one for the
        service provider.
      </p>
      <p>
        For the entity provider section, use <code>https://idp.shibtest.org/shibboleth</code>
        as the entityID attribute value. Use <code>idp.shibtest.org</code> in all places where
        the hostname is required. If you don't use a proxy but an SSL connector in Tomcat,
        set the respective ports to 8443.   
      </p>
      <p>
        Do the same for the service provider section, using <code>sp.shibtest.org</code> as
        the hostname.
      </p>
    </section>
      <section>
        <title>Configure the IdP</title>
        <ul>
          <li>Edit the file <code>$SHIBTEST_HOME/shibboleth-idp/etc/idp.xml</code>.</li>
          <li>
            In the top section, replace <code>idp.example.org</code> with <code>idp.shibtest.org</code>:
            <source xml:space="preserve"><![CDATA[<IdPConfig 
  xmlns="urn:mace:shibboleth:idp:config:1.0" 
  xmlns:cred="urn:mace:shibboleth:credentials:1.0" 
  xmlns:name="urn:mace:shibboleth:namemapper:1.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:schemaLocation="urn:mace:shibboleth:idp:config:1.0 \
    ../schemas/shibboleth-idpconfig-1.0.xsd" 
  AAUrl="https://idp.shibtest.org:8443/shibboleth-idp/AA" 
  resolverConfig="file:/home/john/src/shibtest/shibboleth-idp/etc/resolver.xml"
  defaultRelyingParty="urn:mace:shibboleth:examples" 
  providerId="https://idp.shibtest.org/shibboleth">]]></source>
          </li>
          <li>
            By default, the IdP's protocol handler does only support the ports 433 and 80.
            If you use the SSL connector at port 8443, you have to add this port to the regular
            expression as follows:
            <source xml:space="preserve"><![CDATA[<ProtocolHandler implementation="edu.internet2 \
    .middleware.shibboleth.idp.provider.ShibbolethV1SSOHandler">
  <Location>https?://[^:/]+(:(8443|443|80))?/shibboleth-idp/SSO</Location>
</ProtocolHandler>
...
<ProtocolHandler implementation="edu.internet2.middleware \
    .shibboleth.idp.provider.Shibboleth_StatusHandler">
  <Location>https://[^:/]+(:(8443|443))?/shibboleth-idp/Status</Location>
</ProtocolHandler>]]></source>
          </li>
          <li>
            Now we have to define an attribute which is used by Lenya as the unique identifier
            (see <code>cocoon-xconf.xsl</code>). First, we configure how the attribute should
            be resolved. Then we declare the attribute in the ARP (attribute release policy). 
          </li>
          <li>
            In the bottom of the <code>idp.xml</code> file, change the location of the metadata file
            to <code>file:/home/john/src/shibtest/shibboleth-idp/etc/metadata.xml</code>.
          </li>
          <li>
            Edit the file <code>$SHIBTEST_HOME/shibboleth-idp/etc/resolver.xml</code>,
            uncomment the <code>SimpleAttributeDefinition</code> of <code>eduPersonPrincipalName</code>
            and set the smartScope attribute to our <code>shibtest.org</code> domain:
            <source xml:space="preserve"><![CDATA[<SimpleAttributeDefinition id="urn:mace:dir:attribute-def:eduPersonPrincipalName"
    smartScope="shibtest.org">
  <DataConnectorDependency requires="echo"/>
</SimpleAttributeDefinition>]]></source>
          </li>
          <li>
            Edit the file <code>$SHIBTEST_HOME/shibboleth-idp/etc/arps/arp.site.xml</code>
            and add the declaration of the <code>eduPersonPrincipalName</code> attribute
            to the <code>Rule</code> element:
            <source xml:space="preserve"><![CDATA[<Attribute name="urn:mace:dir:attribute-def:eduPersonPrincipalName">
  <AnyValue release="permit"/>
</Attribute>
]]></source>
          </li>
        </ul>
      </section>
      <section>
        <title>Download and deploy the CAS (Central Authentication System) client library</title>
        <ul>
          <li>
            Download the Yale CAS Java client from the
            <a href="http://www.ja-sig.org/products/cas/">JA-SIG CAS homepage</a>.
            When this documentation was written, the latest version was 2.1.1.
          </li>
          <li>
            Copy the CAS client library to the Shibboleth web application libraries directory:
            <source xml:space="preserve"><![CDATA[$ cd $SHIBTEST_HOME
$ cp casclient-2.1.1.jar shibboleth-1.3.2-install/webApplication/WEB-INF/lib/]]></source>
          </li>
          <li>
            Edit the file <code>shibboleth-1.3.2-install/webAppConfig/dist.idp.xml</code>
            and add the following block to the <code>&lt;web-app&gt;</code> element.
            The declaration of port 8443 is only necessary if you use the SSL connector
            in Tomcat instead of the proxy. 
            <source xml:space="preserve"><![CDATA[<filter>
   <filter-name>CASFilter</filter-name>
   <filter-class>edu.yale.its.tp.cas.client.filter.CASFilter</filter-class>
   <!-- URL of login page of CAS Server -->
   <init-param>
     <param-name>edu.yale.its.tp.cas.client.filter.loginUrl</param-name>
     <param-value>https://idp.shibtest.org:8443/cas/login</param-value>
   </init-param>
   <!-- URL to validation URL of CAS Server -->
   <init-param>
     <param-name>edu.yale.its.tp.cas.client.filter.validateUrl</param-name>
     <param-value>https://idp.shibtest.org:8443/cas/proxyValidate</param-value>
   </init-param>
   <!-- Full hostname with port number to be filtered. The port number
   is not required for standard ports (80,443) -->
   <init-param>
     <param-name>edu.yale.its.tp.cas.client.filter.serverName</param-name>
     <param-value>idp.shibtest.org:8443</param-value>
   </init-param>
   <!-- expose REMOTE_USER (from CAS Client version 2.1.0) --> 
   <init-param>
     <param-name>edu.yale.its.tp.cas.client.filter.wrapRequest</param-name>
     <param-value>true</param-value>
   </init-param>
 </filter>
 
 <filter-mapping>
   <filter-name>CASFilter</filter-name>
   <url-pattern>/SSO/*</url-pattern>
 </filter-mapping>]]></source>
             In the same file, set the <code>load-on-startup</code> paramter of the IdP servlet to <code>1</code>:
             <source xml:space="preserve"><![CDATA[<servlet>
    <servlet-name>IdP</servlet-name>
    <display-name>Shibboleth Identity Provider</display-name>
    <servlet-class>edu.internet2.middleware.shibboleth.idp.IdPResponder</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>]]></source>
          </li>
          <li>
            Now re-deploy the Shibboleth IdP web application:
            <source xml:space="preserve"><![CDATA[$ cd $SHIBTEST_HOME/shibboleth-1.3.2-install
$ ./ant]]></source>
            Answer the questions in the same way as before, actually this just means to accept the pre-set values now.
          </li>
        </ul>
      </section>
      <section>
        <title>Download and install the CAS (Central Authentication System) server</title>
        <ul>
          <li>
            Go to the <a href="http://esup-casgeneric.sourceforge.net/">CAS Generic Handler homepage</a>
            and download the esup-cas-server package. When this documentation was written, the latest
            version was <code>esup-cas-server-2.0.7-3.zip</code>.
          </li>
          <li>
            Extract the archive in the <code>$SHIBTEST_HOME</code> directory.
          </li>
          <li>
            Edit the properties file <code>$SHIBTEST_HOME/esup-cas-server-2.0.7-3/properties/build.properties</code>
            and, at the very end of the file, specify your Tomcat home directory:
            <source xml:space="preserve"><![CDATA[cas-server.deploy.home=$SHIBTEST_HOME/apache-tomcat-5.5.20/webapps/cas]]></source>
          </li>
          <li>
            Deploy the CAS server application:
            <source xml:space="preserve"><![CDATA[$ cd $SHIBTEST_HOME/esup-cas-server-2.0.7-3
$ ant]]></source>
          </li>
        </ul>
      </section>
      <section>
        <title>Generate and deploy the certificates</title>
        <p>
          Now we'll generate a self-signed certificate and add it to the default Java truststore.
        </p>
        <ul>
          <li>Create a directory <code>$SHIBTEST_HOME/pki</code> where our keys and certificates will be stored:
          <source xml:space="preserve"><![CDATA[$ cd $SHIBTEST_HOME
$ mkdir pki
$ cd pki]]></source>
          </li>
          <li>
            Now we generate the self-signed certificate.
            In this example, we assume that you're living in Zurich, Switzerland.
            <source xml:space="preserve"><![CDATA[$ openssl req -new -nodes -x509 -out cert.pem -keyout key.pem -days 365 \
      -subj "/C=CH/L=Zurich/CN=idp.shibtest.org/emailAddress=root@localhost"]]></source>
            The generated certificate is stored in <code>cert.pem</code> and the key in <code>key.pem</code>.
          </li>
          <li>
            We use the Java keytool to generate a keystore for our identity provider,
            containing a dummy key:
            <source xml:space="preserve"><![CDATA[$ keytool -genkey -alias dummy -keystore idp.shibtest.org.jks]]></source>
            When you're asked for the keystore password, enter <code>shibtest</code>.
            Additionally, you have to enter your name and other details.
            When asked for the key password, use the same as for the keystore.
            This command has created a Java keystore file <code>idp.shibtest.org.jks</code>.
          </li>
          <li>
            We can now delete the dummy key from our keystore
            <source xml:space="preserve"><![CDATA[$ keytool -delete -alias dummy -keystore idp.shibtest.org.jks]]></source>
            and end up with an empty keystore.
          </li>
          <li>
            The next step is to create a pkcs8 version of our certificate key:
            <source xml:space="preserve"><![CDATA[$ openssl pkcs8 -in key.pem -topk8 -nocrypt -outform DER -out idp.shibtest.org.key.pkcs8]]></source>
          </li>
          <li>
            Now we use a quite complex command to import this key into the Java keystore:
            <source xml:space="preserve"><![CDATA[$ ../shibboleth-1.3.2-install/bin/extkeytool -importkey \
      -alias idp.shibtest.org \
      -keyfile idp.shibtest.org.key.pkcs8 \
      -certfile cert.pem \
      -keystore idp.shibtest.org.jks \
      -storepass shibtest \
      -provider org.bouncycastle.jce.provider.BouncyCastleProvider]]></source>
            You're promted for the password for this new key, we use <code>shibtest</code> again.
          </li>
          <li>
            The certificate can now be exported in a Java-readable format:
            <source xml:space="preserve"><![CDATA[keytool -export -keystore idp.shibtest.org.jks -alias idp.shibtest.org -file exported.key]]></source>
          </li>
          <li>
            In the last step, we can add our exported server certificate to the Java truststore:
            <source xml:space="preserve"><![CDATA[$ sudo keytool -import -trustcacerts \
      -keystore $JAVA_HOME/lib/security/cacerts \
      -file exported.key -alias idp.shibtest.org]]></source>
            The default password for the Java truststore is <code>changeit</code>.
          </li>
        </ul>
      </section>
      <section>
        <title>Add the example host names to the hosts file</title>
        <ul>
          <li>Edit <code>/etc/hosts</code> and add the following entries:
          <source xml:space="preserve"><![CDATA[127.0.0.1       idp.shibtest.org
127.0.0.1       sp.shibtest.org
127.0.0.1       wayf.shibtest.org]]></source>
          </li>
        </ul>
      </section>
    
    
      <section>
        <title>Setup the WAYF server</title>
        <ul>
          <li>
            We will declare the location of our sites file in the WAYF
            web application's <code>web.xml</code>. Edit the file
            <code>$SHIBTEST_HOME/shibboleth-1.3.2-install/webAppConfig/wayf.xml</code>
            and set the <code>SiteConfigFileLocation</code> to the <code>metadata.xml</code>
            file:
            <source xml:space="preserve"><![CDATA[<init-param>
  <param-name>SiteConfigFileLocation</param-name>
  <param-value>file:///home/john/src/shibtest/shibboleth-idp/etc/metadata.xml</param-value>
</init-param>]]></source>
          </li>
          <li>
            Generate the WAYF web application and deploy it to Tomcat:
            <source xml:space="preserve"><![CDATA[$ cd $SHIBTEST_HOME/shibboleth-1.3.2-install
$ ./ant package-wayf
$ cp dist/shibboleth-wayf.war ../apache-tomcat-5.5.20/webapps/]]></source>
          </li>
        </ul>
      </section>
    
    
    <section>
      <title>Setup the proxy server</title>
      <p>
        We'll use Apache http with mod_proxy_ajp as proxy server, with the following virtual host
        configuration:
      </p>
      <source xml:space="preserve"><![CDATA[NameVirtualHost *:80
NameVirtualHost *:443

<VirtualHost *:80>
    ServerAdmin webmaster@cms.example.com
    ServerName sp.shibtest.org
    ServerAlias cms

    ProxyRequests Off

    RewriteEngine On
    RewriteLog /home/john/src/www/logs/sp.example.org-rewrite_log
    RewriteLogLevel 9
    RewriteCond %{QUERY_STRING} (.*)lenya\.usecase=login(.*)
    RewriteRule ^/(.*) https://%{SERVER_NAME}/$1 [R,L]

    <Location />
      ProxyPass ajp://localhost:8009/
      ProxyPassReverse http://cms.example.com/
    </Location>

    LogLevel debug
    ErrorLog /home/john/src/www/logs/cms.example.com-error_log
    CustomLog /home/john/src/www/logs/cms.example.com-access_log common
</VirtualHost>

<VirtualHost *:443>
    ServerName sp.shibtest.org 
    ServerAlias sp

    ProxyRequests Off

    SSLEngine On
    SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL
    SSLCertificateFile /home/john/src/shibtest/pki/cert.pem
    SSLCertificateKeyFile /home/john/src/shibtest/pki/key.pem

    <Location />
      ProxyPass ajp://localhost:8009/
      ProxyPassReverse https://cms.example.com/
    </Location>

    ErrorLog /home/john/src/www/logs/ssl.sp.shibtest.org-error_log
    CustomLog /home/john/src/www/logs/ssl.sp.shibtest.org-access_log common

</VirtualHost>
]]></source>
      <p>
        Usually, the Tomcat configuration already contains an AJP connector at port 8009.
        If not, add the following connector declaration to <code>$TOMCAT_HOME/conf/server.xml</code>:
      </p>
      <source xml:space="preserve"><![CDATA[<Connector enableLookups="false"
  port="8009" protocol="AJP/1.3" redirectPort="8443"/>]]></source>
      <p>
        If you don't use a proxy, you have to add an SSL connector instead.
        We'll use port 8443 for SSL so we don't have to run Tomcat as root. 
        Edit <code>$SHIBTEST_HOME/apache-tomcat-5.5.20/conf/server.xml</code> and
        declare an SSL connector at port 8443 with the keystore location and password:
      </p>
      <source xml:space="preserve"><![CDATA[<Connector port="8443" maxHttpHeaderSize="8192"
  maxThreads="150" minSpareThreads="25" maxSpareThreads="75"
  enableLookups="false" disableUploadTimeout="true"
  acceptCount="100" scheme="https" secure="true"
  clientAuth="false" sslProtocol="TLS" 
  keystoreFile="/home/john/shibtest/pki/idp.shibtest.org.jks"
  keystorePass="shibtest"/>]]></source>
    </section>
    
    
      <section>
        <title>Configure Lenya</title>
        <ul>
          <li>
            Edit <code>$PUB_HOME/config/ac/ac.xconf</code>.
          </li>
          <li>
            Declare the <code>shibboleth</code> authenticator instead of the default
            <code>user</code> authenticator for the publication:
            <source xml:space="preserve"><![CDATA[<access-controller type="bypassable">
  ...
  <authenticator type="shibboleth"/>
  ...
</access-controller>]]></source>
          </li>
          <li>
            Edit <code>$LENYA_HOME/src/webapp/WEB-INF/cocoon-xconf.xsl</code>.
          </li>
          <li>
            <p>
              The section of interest is the declaration of the
              <code>org.apache.shibboleth.ShibbolethModule</code> with the following elements:
            </p>
        <dl>
          <dt>ProviderId</dt>
          <dd>
            <p>
            A unique string to identify your service provider, for example:
            </p>
            <source xml:space="preserve"><![CDATA[<ProviderId>https://sp.shibtest.org/shibboleth</ProviderId>]]></source>
          </dd>
          <dt>Metadata</dt>
          <dd>
            <p>
              A Cocoon-readable URI which specifies the location of the metadata file. It contains
              for information about your identity and service providers.
            </p>
            <p>
              In a production environment, you'll get this file from your Shibboleth infrastructure authority,
              and place it for instance at
            </p>
            <source xml:space="preserve"><![CDATA[<Metadata>context://WEB-INF/metadata.xml</Metadata>]]></source>
            <p>
              In our test environment, we'll just reference the IdP's metadata file:
            </p>
            <source xml:space="preserve"><![CDATA[<Metadata>file:///home/john/src/shibtest/shibboleth-idp/etc/metadata.xml</Metadata>]]></source>
          </dd>
          <dt>Shire</dt>
          <dd>
            <p>
              The shire or assertion consumer service URL is used by the identity provider to send the
              authentication information to. The configuration is a path relative to the servlet URL or
              proxy URL, respectively. This allows you to serve different virtual hosts using a single
              Lenya instance, for instance:
            </p>
            <ul>
              <li>http://www.science.uni.edu -> http://cms.uni.edu:8080/science/live</li>
              <li>http://www.law.uni.edu -> http://cms.uni.edu:8080/law/live</li>
            </ul>
            <p>
              The virtual hosts are configured in the proxy settings of the publications.
              In this example, you would use the following shire configuration:
            </p>
            <source xml:space="preserve"><![CDATA[<Shire>/index.html?lenya.usecase=login&amp;lenya.step=login</Shire>]]></source>
            <p>
              The complete shire URL is generated by the application.
            </p>
          </dd>
          <dt>AAP</dt>
          <dd>A Cocoon-readable URI which specifies the location of the AAP (Attribute Acceptance
            Policy) file. A typical location would be
            <source xml:space="preserve"><![CDATA[<AAP>context://WEB-INF/AAP.xml</AAP>]]></source>
          </dd>            
          <dt>WayfServer</dt>
          <dd>
            The URL of your WAYF server, for example:
            <source xml:space="preserve"><![CDATA[<WayfServer>https://wayf.shibtest.org/shibboleth-wayf/WAYF</WayfServer>]]></source>
            Don't forget to include the port 8443 if you use the SSL connector in Tomcat.            
          </dd>
        </dl>
        </li>
          <li>
            Configure the keystore and truststore locations:
            <source xml:space="preserve"><![CDATA[<component logger="lenya.ac.shibboleth"
  role="org.apache.shibboleth.util.CredentialsManager"
  class="org.apache.shibboleth.util.CredentialsManager">
  <KeyStore>
    <Location>file:///home/john/shibtest/pki/idp.shibtest.org.jks</Location>
    <Type>JKS</Type>
    <StorePassword>shibtest</StorePassword>
    <KeyPassword>shibtest</KeyPassword>
  </KeyStore>
  <TrustStore>
    <Location>file:///home/john/shibtest/pki/idp.shibtest.org.jks</Location>
    <Type>JKS</Type>
    <StorePassword>shibtest</StorePassword>
  </TrustStore>
</component>]]></source>
          </li>
          <li>
            Configure the user fields mapping to specify which attributes should be used to
            determine the user's first name, last name, and e-mail address:
            <source xml:space="preserve"><![CDATA[<component logger="lenya.ac.shibboleth"
  role="org.apache.shibboleth.util.UserFieldsMapping"
  class="org.apache.shibboleth.util.impl.UserFieldsMappingImpl">
  <FirstName>urn:mace:dir:attribute-def:givenName</FirstName>
  <LastName>urn:mace:dir:attribute-def:sn</LastName>
  <EMail>urn:mace:dir:attribute-def:mail</EMail>
</component>]]></source>
          </li>
          <li>
            To test if the authentication was successful, we'll grant the <code>edit</code>
            role to the authoring area for a <code>shib</code> user. Edit the file
            <code>$LENYA_HOME/src/webapp/lenya/pubs/default/config/ac/policies/authoring/subtree-policy.acml</code>
            and add the following block:
            <source xml:space="preserve"><![CDATA[<user id="shib">
  <role id="edit"/>
</user>]]></source>
          </li>
          <li>
            Build Lenya:
            <source xml:space="preserve"><![CDATA[$ cd $LENYA_HOME
$ ./build.sh]]></source>
          </li>
        </ul>
      </section>
      <section>
        <title>Start Lenya and Tomcat</title>
        <ul>
          <li>
            Start Tomcat:
            <source xml:space="preserve"><![CDATA[$ cd $SHIBTEST_HOME/apache-tomcat-5.5.20/bin
$ ./startup.sh]]></source>
            If you can't execute <code>startup.sh</code>, you have to make the scripts executable:
            <source xml:space="preserve"><![CDATA[$ chmod +x *.sh]]></source>
          </li>
          <li>
            Start Lenya:
            <source xml:space="preserve"><![CDATA[$ cd $LENYA_HOME
$ ./lenya.sh]]></source>
          </li>
        </ul>
      </section>
      <section>
        <title>Test your installation</title>
        <ul>
          <li>Go to <a href="http://localhost:8888/default/authoring/index.html">http://localhost:8888/default/authoring/index.html</a></li>
          <li>
            Click the link "Login via Shibboleth".
          </li>
          <li>
            The browser tells you that it is unable to verify the identity of idp.shibtest.org as a trusted site.
            That's because we use a self-signed certificate. Click OK to accept the certificate.
          </li>
          <li>
            Now the browser complains that you're trying to connect to localhost, but the certificate belongs
            to idp.shibtest.org. Click OK.
          </li>
          <li>
            You should be redirected to the URL
            <code>https://wayf.shibtest.ort/shibboleth-wayf/WAYF?shire=...</code>. A page
            with the title "Select an identity provider" should appear.
          </li>
          <li>
            Submit the form with the pre-selected IdP "Identities'R'Us".
          </li>
          <li>
            You should be redirected to the URL <code>https://idp.shibtest.org/shibboleth-idp/SSO?target=</code>
            which in turn redirects to <code>https://idp.shibtest.org/cas/login?service=</code>.
          </li>
          <li>
            Now you should see a page with a blue background and the headline
            "Service Central d'Authentification".
          </li>
          <li>
            Enter username <code>shib</code> and password <code>shib</code>.
            The CAS server's default configuration accepts empty passwords and
            passwords which are the same as the user name.
            Submit the form.
          </li>
          <li>
            The browser displays a security warning about encrypted information. Click "Continue".
          </li>
          <li>
            Now you should be redirected to the Lenya authoring area. The username in the status bar
            should be "shib". If yes - congratulations! If not - please go through the installation
            instructions again and ask your questions on the Lenya or Shibboleth mailing list.
          </li>
        </ul>
      </section>
    
  </body>
</document>
