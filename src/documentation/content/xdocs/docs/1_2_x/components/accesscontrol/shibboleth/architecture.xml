<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2002-2004 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document>
  <header>
    <title>Shibboleth Integration Architecture</title>
  </header>
  <body>
    <section>
      <title>Class Diagram</title>
      <p>
        The following class diagram illustrates the involved interfaces and classes and their relationships.
      </p>
      <figure alt="Shibboleth integration class diagram" src="classes.png"></figure>
    </section>
    <section>
      <title>org.apache.lenya.ac.shibboleth.ShibbolethAuthenticator</title>
      <p>
        The entry point from the Lenya application's point of view is the <code>ShibbolethAuthenticator</code>
        class. It is an implementation the <code>Authenticator</code> service, providing the functionality
        to check if a request contains valid authentication information. 
      </p>
      <p>
        Since the <code>ShibbolethAuthenticator</code> extends the <code>UserAuthenticator</code> class, it has to provide the
        same functionality (Liskov subsitution principle). So it checks if the request parameters
        <em>username</em> and <em>password</em> exist, and delegates the password-based authentication
        to the superclass. If these request parameters don't exist, the <code>ShibbolethAuthenticator</code> assumes
        that the request was issued by the <acronym title="Identity Provider">IdP</acronym> and uses
        the <code>AttributeRequestService</code> to send the corresponding attribute request.
      </p>
      <p>
        If the attribute request was successful, a <code>TransientUser</code> object is created by calling
        <code>UserManager.getUser(String)</code> with a non-existing ID, initialized
        with the attributes provided by the IdP, and attached to the Identity object which is stored
        in the session. The IdP attributes are mapped to Lenya user attributes (e-mail, first name,
        last name) using the <code>UserFieldsMapping</code> service
        (see section <a href="site:attributes-authorization">attribute-based authorization</a> for more information).
      </p>
    </section>
    
    <section>
      <title>org.apache.lenya.ac.shibboleth.ShibbolethModule</title>
      <p>
        The <code>ShibbolethModule</code> is an input module which provides access
        to Shibboleth attributes in sitemaps.
        It is used to obtain the WAYF server URL and the request parameters which
        have to be attatched when the Login usecase redirects to the WAYF server.
      </p>
      <p>
        The attributes are
      </p>
      <dl>
        <dt>wayfServer</dt>
        <dd>The URL of the WAYF server</dd>
        <dt>shire</dt>
        <dd>The value of the <em>shire</em> request parameter for the WAYF server.</dd>
        <dt>target</dt>
        <dd>The value of the <em>target</em> request parameter for the WAYF server.</dd>
        <dt>providerId</dt>
        <dd>The value of the <em>providerId</em> request parameter for the WAYF server.</dd>
      </dl>
    </section>
    
    <section>
      <title></title>
    </section>
  </body>
</document>
