<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 1999-2004 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!-- $Id: unittests.xml 55543 2004-10-26 00:14:59Z gregor $ -->

<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">

<document>
  <header>
    <title>Writing Unit Tests</title>
  </header>
  <body>
    <section>
      <title>Introduction</title>
      <p>Recommended resources</p>
      <ul>
        <li><a href="http://www.junit.org">JUnit homepage</a></li>
        <li><a href="http://junit.sourceforge.net/doc/cookbook/cookbook.htm">JUnit Cookbook</a> (Eric Gamma, Kent Beck)</li>
        <li><a href="http://junit.sourceforge.net/doc/cookstour/cookstour.htm">JUnit: A Cook's Tour</a> (Eric Gamma, Kent Beck)</li>
        <li><a href="http://junit.sourceforge.net/doc/testinfected/testing.htm">JUnitTest Infected: Programmers Love Writing Tests</a></li>
      </ul>
    </section>

<section><title>Organization</title>
<ul>
<li><p>  Put your test classes in <em>src/test</em>. </p>
</li>
<li><p>  Add the ant task that executes your test to <em>src/targets/test-build.xml</em>. </p>

</li>
</ul>

</section><section><title id="head-655f58cfc0972b961e3661ac08aac2ff99ca1b48">The Test Publication</title>

<p>Most tests will need a publication in the install (servlet container) directory. To provide a predictable test publication, the clean <em>default</em> publication from the build directory is copied to the <em>test</em> publication in the installation directory. </p>
<p>In the test buildfile, the test publication is setup by the <em>test.pub.prepare</em> target. The directory {{${install.dir}/lenya/pubs/test}} is deleted (so that the files created by former tests are removed), and the default publication is copied to this directory. Add this target to the <em>depends</em> attribute of your test target if you need the test publication. </p>

</section><section><title id="head-65a89586ffaf2c23e63e3cf91ac1e6e40cd84cc6">The PublicationHelper</title>

<p>To simplify the acces to a publication you can use the class <em>org.apache.lenya.cms.PublicationHelper</em>. It provides the following methods: </p>

<source>
    /**
     * Initializes the object with the first parameters from the command
     * line arguments &lt;code&gt;args&lt;/code&gt;. The remainder of the array is returned.
     * @param args The command line arguments of the test.
     * @return The remainder of the arguments after the publication
     * parameters are extracted.
     */
    public static String[] extractPublicationArguments(String args[]);

    /**
     * Returns the publication.
     * @return A publication object.
     */
    public static Publication getPublication();
</source>

<p>The <em>extractPublicationArguments(String[])</em> method extracts the first two strings from the <em>args</em> parameter. The first one is the servlet context path, the second is the publication ID. </p>
<p>To make use of the PublicationHelper, you have to call the <em>extractPublicationArguments(String[])</em> method in the <em>main(String())</em> method of your <em>TestCase</em> class. This initializes the PublicationHelper: </p>

<source>
    public static void main(String[] args) {

        // extract the arguments needed for setting up the publication
        // only the remaining arguments are returned
        args = PublicationHelper.extractPublicationArguments(args);

        ...
    }
</source>

</section><section><title id="head-8878fcb8bad4bee373aa2a9f486fa1b5ac58586c">A TestCase Skeleton</title>


<source>
public class MyTest extends TestCase {

    // static fields to store test parameters
    private File configFile;
    ...
    
    /** Constructor. */
    public MyTest(String test) {
        super(test);
    }

    /**
     * The main program.
     * The parameters are set from the command line arguments.
     *
     * @param args The command line arguments.
     */
    public static void main(String[] args) {
        args = PublicationHelper.extractPublicationArguments(args);
        setConfigFile(args[0]);
        TestRunner.run(getSuite());
    }

    /** Returns the test suite. */
    public static Test getSuite() {
        return new TestSuite(MyTest.class);
    }

    /** Tests whatever you want. */
    public void testSomething() {
        ...
    }

    /** Sets a parameter value. */
    protected static void setConfigFile(String fileName) {
        assertNotNull(string);
        File publicationDirectory
            = PublicationHelper.getPublication().getDirectory();
        configFile = new File(publicationDirectory, fileName);
        assertTrue(configFile.exists());
    }

    /** Returns a parameter value. */
    protected static File getConfigFile() {
        return configFile;
    }
}
</source>

</section><section><title id="head-d0a01800d3a5e8cc04a8fca0bdb4fd67dec4db20">Debugging a Test</title>

<p>For debugging, it might be desired to run the test from an API. In this case, the <em>main(String[])</em> method is never executed. </p>
<p>To provide the parameters, you can hardcode them as fallback in the TestCase.setup() method that is called before the test is invoked: </p>

<source>
    /** @see junit.framework.TestCase#setUp() */
    protected void setUp() throws Exception {
        if (getConfigFile() == null) {
            String args[] = {
                "D:\\Development\\build\\tomcat-4.1.24\\webapps\\lenya",
                "test"
            };
            PublicationHelper.extractPublicationArguments(args);
            setConfigFile("config/something.xconf");
        }
    }
</source>

</section><section><title id="head-d8c100285806e70cf61740be84709676e34fd9c4">The Test Buildfile</title>

<p>The test buildfile is located at <em>src/targets/test-build.xml</em>. It contains the following common targets: </p>
<ul>
<li><p>  <strong>test</strong> - Runs all tests. </p>
</li>
<li><p>  <strong>tests.junit</strong> - Runs the JUnit tests. </p>

</li>
<li><p>  <strong>tests.anteater</strong> - Runs the Anteater tests. </p>
</li>
<li><p>  <strong>tests.prepare</strong> - Prepares the tests, e.g. compiles test classes. </p>
</li>
<li><p>  <strong>test.pub.prepare</strong> - Prepares the test publication.  </p>

</li>
</ul>

</section><section><title id="head-73e85ec07ad251e822d4a03aaf2f9a03b6473ec8">Adding the Test to the Buildfile</title>

<p>To add your test to the buildfile, you create a target called <em>test.&lt;name&gt;</em>. </p>
<p>If you use assertions (Java assertions, not the JUnit ones) in your test, it is important to enable them using the <em>-ea</em> or <em>-enableassertions</em> argument. </p>

<source>
  &lt;target name="test.my" depends="test.pub.prepare"&gt;
    &lt;!-- My Test --&gt;
    &lt;java fork="yes" classname="org.apache.lenya.cms.mypackage.MyTest"&gt;
      &lt;jvmarg value="-enableassertions"/&gt;

      &lt;arg value="${install.dir}"/&gt;           // PublicationHelper
      &lt;arg value="test"/&gt;                     // PublicationHelper
      &lt;arg value="config/something.xconf"/&gt;   // MyTest

      &lt;classpath refid="classpath"/&gt;

      &lt;classpath&gt;
        &lt;pathelement location="${build.test}" /&gt;
        &lt;pathelement path="${build.root}/lenya/webapp/WEB-INF/classes" /&gt;
        &lt;fileset dir="${build.root}/lenya/webapp/WEB-INF/lib"&gt;
          &lt;include name="ant**.jar"/&gt;
        &lt;/fileset&gt;

      &lt;/classpath&gt;
    &lt;/java&gt;
  &lt;/target&gt;
</source>
<p>Finally, you have to add the test to the <em>tests.junit</em> target: </p>

<source>

&lt;target name="tests.junit" depends="init, tests.prepare, ..., test.my"&gt;
</source>
<p>Now you can run the tests: </p>

<source>
$LENYA_HOME &gt; build test
</source>
<p>If you want to call your test independently, you have to call the preparation targets before: </p>

<source>
$LENYA_HOME &gt; build init
$LENYA_HOME &gt; build tests.prepare
$LENYA_HOME &gt; build test.my

</source></section>    
  </body>
</document>

