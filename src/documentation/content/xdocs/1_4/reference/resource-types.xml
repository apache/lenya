<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2002-2004 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document>
	<header>
		<title>Resource Types</title>
	</header>
	<body>
	  
<section>
	<title>Introduction</title>
	
	<p>
	A resource type defines a certain XML source format, together with processing options.
	It typically consists of
	</p>
	<ul>
	  <li>an XML structure definition (e.g., Relax NG)</li>
	  <li>some presentation pipelines,</li>
	  <li>some presentation XSLT stylesheets,</li>
	  <li>usecases to manipulate documents.</li>
	</ul>
	<p>
	  All of these can be shared between several resource types.
	</p>
	<p>
	  The information describing a resource type is managed by a
	  <a href="http://lenya.apache.org/apidocs/1.4/org/apache/lenya/cms/publication/ResourceType.html"><code>ResourceType</code></a>
	  service. The default implementation is 
	  <a href="http://lenya.apache.org/apidocs/1.4/org/apache/lenya/cms/publication/ResourceTypeImpl.html"><code>ResourceTypeImpl</code></a>.
	  It implements <code>ThreadSafe</code>, which ensures that only a single instance of every resource type is created.
	  It is not possible to declare multiple resource types with the same name. 
	</p>
</section>

<section><title>Choose a Unique Resource Type Name</title>
  <p>
    You should choose a reasonable name for your resource type.
  </p>
  <note>
    In the examples, we use the name <em>profile</em> (page with information about a person).
  </note>
</section>
	  
<section>
  <title>Adding the Resource Type to a Publication</title>
  
  <p>
    The resource types used by a publication are declared in <code>publication.xconf</code>,
    including the assignment of a workflow schema to a resource type:
  </p>
  
<source xml:space="preserve"><![CDATA[<publication>
  ...
  <resource-type name="xhtml" workflow="workflow.xml"/>
  <resource-type name="homepage" workflow="workflow.xml"/>
  <resource-type name="links" workflow="workflow.xml"/>
  <resource-type name="profile" workflow="workflow.xml"/>
  ...
</publication>
]]></source>

  
  <p>
    You can add references to any resource types configured in
    <code><![CDATA[<lenya-webapp>/WEB-INF/cocoon.xconf]]></code>,
    containing
  </p>
  
  <ul>
    <li>resource types provided by modules,</li>
    <li>resource types of template publications, and</li>
    <li>resource types of the publication itself.</li>
  </ul>
  
  <p>
    Adding a custom resource type to your publication includes the following steps:
  </p>
  
  <section><title>Providing a Sample XML Document</title>
    <p>
      If you want to enable users to create new resources belonging to
      your resource type, it is useful to provide a sample XML document.
      If you want to use the <code>DefaultBranchCreator</code> that ships
      with Lenya, you have to add the sample document because it is used
      as a template for creating new resources.
    </p>
    <p>
      The sample document is typically placed in
      <code><![CDATA[<publication>/lenya/resources/samples/]]></code>.
      You can choose an arbitrary filename, but it is recommended to
      use the resource type name (e.g., <code>profile.xml</code>).
    </p>
  </section>
  
  <section><title>Providing an XML Structure Definition</title>
    <p>
      This step is only needed if you want to edit resources with Lenya
      or validate them after they have been imported or manipulated.
      The type of the structure definition
      (<a href="http://www.w3.org/XML/Schema">XML Schema</a>,
      <a href="http://www.relaxng.org/">Relax NG</a>, ...)
      depends on the editor or validator you want to use. For instance,
      the <a href="http://www.bitfluxeditor.org/">BXE</a> WYSIWYG
      editor requires a Relax NG document.
    </p>
    <p>The structure definition document is typically placed in the directory
      <code>&lt;publication&gt;/lenya/resources/schemas/</code>. The name
      of the file is arbitrary, but it is recommended to use the
      resource type name (e.g., <code>profile.rng</code>).
    </p>
  </section>
  
  <section><title>Creating a Workflow Schema</title>
    <p>
      If your resources should have a workflow, you have to add a workflow
      schema for your resource type as described in
      <a href="site:wfconfig">Workflow Configuration</a>.
      A workflow schema can be shared between multiple resource types.
      The workflow schema is assigned to a resource type in <code>publication.xconf</code>
      (see section <em>Adding Resource Types to a Publication</em>).
    </p>
  </section>
  
  <section><title>The Resource Type Definition</title>
    <p>
    To declare a custom resource type and assign the creator, schema etc. to it,
	  add the component instance to an XPatch file (e.g.,
	  <code>&lt;publication&gt;/config/cocoon-xconf/resourcetype-profile.xconf</code>):
    </p>
    <source><![CDATA[<xconf xpath="/cocoon/resource-types"
       unless="/cocoon/resource-types/component-instance[@name = 'profile']">

  <component-instance name="profile"
                      logger="lenya.resourcetypes.profile"
                      class="org.apache.lenya.cms.publication.ResourceTypeImpl">
    <schema src="fallback://lenya/resources/schemas/profile.rng"
            language="http://relaxng.org/ns/structure/0.9"/>
    <creator src="org.apache.lenya.cms.authoring.DefaultBranchCreator">
      <sample-name>fallback://lenya/resources/samples/profile.xml</sample-name>
    </creator>
    <link-attribute xpath="//*[namespace-uri() = 'http://foo.bar.org/profile']/@href"/>
    <format name="xhtml" uri="cocoon://modules/profile/profile.xml"/>
  </component-instance>

</xconf>]]></source>

    <p>
      This XPatch file will be used when the publication is deployed (e.g., when you issue
      a <code>./build</code> command). Its contents will be patched into
      <code><![CDATA[<lenya-webapp>/WEB-INF/cocoon.xconf]]></code>.
    </p>

  </section>
  
  <section><title>Define a Custom Menubar</title>
    <p>
      If you want to use a custom menubar for your resource type,
      follow the guidelines on the page
      <a href="site:menubar">The Lenya Menubar</a>.
      Typically, a menubar is shared between multiple resource types.
      Small customizations can be achieved with Java code in the menubar XSP.
    </p>
    <p>
      To let the user create new resources using the <code>DefaultBranchCreator</code>,
      you have to add the following menu item:
    </p>
<source>
  <![CDATA[<item uc:usecase="site.create" href="?doctype=profile"><i18n:text>New Profile Document</i18n:text></item>]]>
</source>
  </section>
  
  <section>
    <title>Formats</title>
    
    <p>
      A resource type provides a set of <em>formats</em> to provide different ways of presenting content documents.
      The formats are defined in the resource type declaration:
    </p>
<source xml:space="preserve">
  <![CDATA[<format name="xhtml" uri="cocoon://modules/profile/profile.xml"/>]]>
</source>
    <p>
      The <code>uri</code> attribute of the <code>format</code> element may refer to an arbitrary URL,
      which is typically a request into the module itself. This URI is matched inside the module
      sitemap (in our case, <code>modules/profile/sitemap.xmap</code>). Typically, an XSLT is applied
      to the content document to transform it into another format (XHTML, XSL-FO, ...):
    </p>
    <note>
      In the following snippet, the module name <code>pe</code> is used as a shortcut fo
      <code>page-envelope</code>. You have to change it if you copy &amp; paste the code.
    </note>
    <source xml:space="preserve"><![CDATA[
  <!-- apply a format -->
  <map:match pattern="*.xml">
    <map:generate src="lenya://lenya/pubs/{pe:publication-id}/content/{pe:area}/{pe:document-path}"/>
    <map:transform src="fallback://lenya/modules/profile/xslt/profile2xhtml.xsl">
      <map:parameter name="rendertype" value="{request-param:rendertype}"/>
      <map:parameter name="nodeid" value="{pe:document-name}"/>
      <map:parameter name="language" value="{pe:document-language}"/>
    </map:transform>
    <map:serialize type="xml"/>
  </map:match>
]]></source>
    <p>
      To request a formatted document, use the <code>format-...</code> attribute of the
      <code>resource-type</code> input module:
    </p>
<source xml:space="preserve">
  <![CDATA[<!-- aggregate navigation components and XHTML-formatted content -->
  <map:aggregate element="cmsbody">
    <map:part src="cocoon://modules/sitetree/{2}/{3}/breadcrumb/{5}.xml"/>
    <map:part src="cocoon://modules/sitetree/{2}/{3}/tabs/{5}.xml"/>
    <map:part src="cocoon://modules/sitetree/{2}/{3}/menu/{5}.xml"/>
    <map:part src="cocoon://modules/sitetree/{2}/{3}/search/{5}.xml"/>
    <map:part src="{resource-type:format-xhtml}"/>
  </map:aggregate>
]]>
</source>
    
  </section>
  
  <section><title>Presentation</title>
    
    <p>
      To make your resources available as HTTP pages, you have to add the
      appropriate pipelines and XSLT stylesheets. In general, there are no
      restrictions.
    </p>
    <p>
      If you derive your publication from the default publication,
      the pipelines have to be placed in
      <code>&lt;publication&gt;/doctypes.xmap</code>. The stylesheets are located in
      <code>&lt;publication&gt;/xslt/</code> and are named <code>&lt;resource-type&gt;2xhtml.xsl</code>
      (e.g., <code>profile2xhtml.xsl</code>). The stylesheet is supposed to generate
      a valid XHTML fragment (in the XHTML namespace) with <code>&lt;div id="body"&gt;</code>
      as the document element.
    </p>
    
  </section>

</section>

	</body>
</document>
